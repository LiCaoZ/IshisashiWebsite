from z3 import *

res

A = [[Bool('A_%s_%s' % (i, j)) for j in range(48)] for i in range(16)]
B = [[Bool('B_%s_%s' % (i, j)) for j in range(48)] for i in range(16)]
C = [[Bool('C_%s_%s' % (i, j)) for j in range(48)] for i in range(16)]
D = [[[bool(int(res[i * 256 + j * 16 + k])) for k in range(16)] for j in range(16)] for i in range(16)]

solver = Solver()

for i in range(16):
    for j in range(16):
        for k in range(16):
            if (D[i][j][k]):
                solver.add(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(And(A[i][0], B[j][0], C[k][0]), And(A[i][1], B[j][1], C[k][1])), And(A[i][2], B[j][2], C[k][2])), And(A[i][3], B[j][3], C[k][3])), And(A[i][4], B[j][4], C[k][4])), And(A[i][5], B[j][5], C[k][5])), And(A[i][6], B[j][6], C[k][6])), And(A[i][7], B[j][7], C[k][7])), And(A[i][8], B[j][8], C[k][8])), And(A[i][9], B[j][9], C[k][9])), And(A[i][10], B[j][10], C[k][10])), And(A[i][11], B[j][11], C[k][11])), And(A[i][12], B[j][12], C[k][12])), And(A[i][13], B[j][13], C[k][13])), And(A[i][14], B[j][14], C[k][14])), And(A[i][15], B[j][15], C[k][15])), And(A[i][16], B[j][16], C[k][16])), And(A[i][17], B[j][17], C[k][17])), And(A[i][18], B[j][18], C[k][18])), And(A[i][19], B[j][19], C[k][19])), And(A[i][20], B[j][20], C[k][20])), And(A[i][21], B[j][21], C[k][21])), And(A[i][22], B[j][22], C[k][22])), And(A[i][23], B[j][23], C[k][23])), And(A[i][24], B[j][24], C[k][24])), And(A[i][25], B[j][25], C[k][25])), And(A[i][26], B[j][26], C[k][26])), And(A[i][27], B[j][27], C[k][27])), And(A[i][28], B[j][28], C[k][28])), And(A[i][29], B[j][29], C[k][29])), And(A[i][30], B[j][30], C[k][30])), And(A[i][31], B[j][31], C[k][31])), And(A[i][32], B[j][32], C[k][32])), And(A[i][33], B[j][33], C[k][33])), And(A[i][34], B[j][34], C[k][34])), And(A[i][35], B[j][35], C[k][35])), And(A[i][36], B[j][36], C[k][36])), And(A[i][37], B[j][37], C[k][37])), And(A[i][38], B[j][38], C[k][38])), And(A[i][39], B[j][39], C[k][39])), And(A[i][40], B[j][40], C[k][40])), And(A[i][41], B[j][41], C[k][41])), And(A[i][42], B[j][42], C[k][42])), And(A[i][43], B[j][43], C[k][43])), And(A[i][44], B[j][44], C[k][44])), And(A[i][45], B[j][45], C[k][45])), And(A[i][46], B[j][46], C[k][46])), And(A[i][47], B[j][47], C[k][47])))
            else:
                solver.add(Not(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(Xor(And(A[i][0], B[j][0], C[k][0]), And(A[i][1], B[j][1], C[k][1])), And(A[i][2], B[j][2], C[k][2])), And(A[i][3], B[j][3], C[k][3])), And(A[i][4], B[j][4], C[k][4])), And(A[i][5], B[j][5], C[k][5])), And(A[i][6], B[j][6], C[k][6])), And(A[i][7], B[j][7], C[k][7])), And(A[i][8], B[j][8], C[k][8])), And(A[i][9], B[j][9], C[k][9])), And(A[i][10], B[j][10], C[k][10])), And(A[i][11], B[j][11], C[k][11])), And(A[i][12], B[j][12], C[k][12])), And(A[i][13], B[j][13], C[k][13])), And(A[i][14], B[j][14], C[k][14])), And(A[i][15], B[j][15], C[k][15])), And(A[i][16], B[j][16], C[k][16])), And(A[i][17], B[j][17], C[k][17])), And(A[i][18], B[j][18], C[k][18])), And(A[i][19], B[j][19], C[k][19])), And(A[i][20], B[j][20], C[k][20])), And(A[i][21], B[j][21], C[k][21])), And(A[i][22], B[j][22], C[k][22])), And(A[i][23], B[j][23], C[k][23])), And(A[i][24], B[j][24], C[k][24])), And(A[i][25], B[j][25], C[k][25])), And(A[i][26], B[j][26], C[k][26])), And(A[i][27], B[j][27], C[k][27])), And(A[i][28], B[j][28], C[k][28])), And(A[i][29], B[j][29], C[k][29])), And(A[i][30], B[j][30], C[k][30])), And(A[i][31], B[j][31], C[k][31])), And(A[i][32], B[j][32], C[k][32])), And(A[i][33], B[j][33], C[k][33])), And(A[i][34], B[j][34], C[k][34])), And(A[i][35], B[j][35], C[k][35])), And(A[i][36], B[j][36], C[k][36])), And(A[i][37], B[j][37], C[k][37])), And(A[i][38], B[j][38], C[k][38])), And(A[i][39], B[j][39], C[k][39])), And(A[i][40], B[j][40], C[k][40])), And(A[i][41], B[j][41], C[k][41])), And(A[i][42], B[j][42], C[k][42])), And(A[i][43], B[j][43], C[k][43])), And(A[i][44], B[j][44], C[k][44])), And(A[i][45], B[j][45], C[k][45])), And(A[i][46], B[j][46], C[k][46])), And(A[i][47], B[j][47], C[k][47]))))

if solver.check() == sat:
    m = solver.model()
    Ar = [[m[A[i][j]] for j in range(48)] for i in range(16)]
    Br = [[m[B[i][j]] for j in range(48)] for i in range(16)]
    Cr = [[m[C[i][j]] for j in range(48)] for i in range(16)]
    print(Ar)
    print(Br)
    print(Cr)
else:
    print ('unsat')
